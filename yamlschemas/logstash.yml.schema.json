{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"definitions": {
		"integerOrString": {
			"oneOf": [
				{
					"type": "integer"
				},
				{
					"type": "string"
				}
			]
		},
		"booleanOrString": {
			"oneOf": [
				{
					"type": "boolean"
				},
				{
					"type": "string"
				}
			]
		}
	},
	"type": "object",
	"properties": {
		"node.name": {
			"type": "string",
			"description": "A descriptive name for the node. Default is machine's hostname.",
			"default": "\"${HOSTNAME}\"",
			"examples": [
				"\"${HOSTNAME}\""
			]
		},
		"path.data": {
			"type": "string",
			"description": "The directory that Logstash and its plugins use for any persistent needs.",
			"default": "\"${LOGSTASH_HOME}/data\"",
			"examples": [
				"\"${LOGSTASH_HOME}/data\""
			]
		},
		"pipeline.id": {
			"type": "string",
			"description": "The ID of the pipeline.",
			"default": "main",
			"examples": [
				"main"
			]
		},
		"pipeline.java_execution": {
			"$ref": "#/definitions/booleanOrString",
			"description": "Use the Java execution engine.",
			"default": "true",
			"examples": [
				"false"
			]
		},
		"pipeline.workers": {
			"$ref": "#/definitions/integerOrString",
			"description": "The number of workers that will, in parallel, execute the filter and output stages of the pipeline. This setting uses the java.lang.Runtime.getRuntime.availableProcessors value as a default if not overridden by pipeline.workers in pipelines.yml or pipeline.workers from logstash.yml. If you have modified this setting and see that events are backing up, or that the CPU is not saturated, consider increasing this number to better utilize machine processing power. Default value is the number of the host’s CPU cores.",
			"default": "",
			"examples": [
				"1"
			]
		},
		"pipeline.batch.size": {
			"$ref": "#/definitions/integerOrString",
			"description": "The maximum number of events an individual worker thread will collect from inputs before attempting to execute its filters and outputs. Larger batch sizes are generally more efficient, but come at the cost of increased memory overhead. You may need to increase JVM heap space in the jvm.options config file. See Logstash Configuration Files for more info.",
			"default": "125",
			"examples": [
				"125"
			]
		},
		"pipeline.batch.delay": {
			"$ref": "#/definitions/integerOrString",
			"description": "When creating pipeline event batches, how long in milliseconds to wait for each event before dispatching an undersized batch to pipeline workers.",
			"default": "50",
			"examples": [
				"50"
			]
		},
		"pipeline.unsafe_shutdown": {
			"$ref": "#/definitions/booleanOrString",
			"description": "When set to true, forces Logstash to exit during shutdown even if there are still inflight events in memory. By default, Logstash will refuse to quit until all received events have been pushed to the outputs. Enabling this option can lead to data loss during shutdown.",
			"default": "false",
			"examples": [
				"true"
			]
		},
		"pipeline.plugin_classloaders": {
			"$ref": "#/definitions/booleanOrString",
			"description": "(Beta) Load Java plugins in independent classloaders to isolate their dependencies.\nSince Logstash 7.2",
			"default": "false",
			"examples": [
				"true"
			]
		},
		"pipeline.ordered": {
			"type": "string",
			"description": "Set the pipeline event ordering. Valid options are: 'auto', 'true' and 'false'. 'auto' will automatically enable ordering if the pipeline.workers setting is also set to 1. 'true' will enforce ordering on the pipeline and prevent logstash from starting if there are multiple workers. 'false' will disable the processing required to preserve order. When 'false', ordering is not guaranteed, but you save the processing cost of preserving order.\nSince Logstash 7.7",
			"default": "auto",
			"examples": [
				"true",
				"false"
			]
		},
		"pipeline.ecs_compatibility": {
			"type": "string",
			"description": "Sets the pipeline’s default value for ecs_compatibility, a setting that is available to plugins that implement an ECS compatibility mode for use with the Elastic Common Schema.\nSince Logstash 7.14",
			"default": "disabled",
			"examples": [
				"v1",
				"v8"
			]
		},
		"path.config": {
			"type": "string",
			"description": "The path to the Logstash config for the main pipeline. If you specify a directory or wildcard, config files are read from the directory in alphabetical order. Default value is platform-specific, see Logstash Directory Layout.",
			"default": "",
			"examples": [
				"\"pipeline-config/logstash-*.conf\""
			]
		},
		"config.string": {
			"type": "string",
			"description": "A string that contains the pipeline configuration to use for the main pipeline. Use the same syntax as the config file. There is no default value.",
			"default": "",
			"examples": [
				"\"input { generator {} } filter { dns {} } output { stdout { codec => rubydebug } }\""
			]
		},
		"config.test_and_exit": {
			"$ref": "#/definitions/booleanOrString",
			"description": "When set to true, checks that the configuration is valid and then exits. Note that grok patterns are not checked for correctness with this setting. Logstash can read multiple config files from a directory. If you combine this setting with log.level: debug, Logstash will log the combined config file, annotating each config block with the source file it came from.",
			"default": "false",
			"examples": [
				"true"
			]
		},
		"config.reload.automatic": {
			"$ref": "#/definitions/booleanOrString",
			"description": "When set to true, periodically checks if the configuration has changed and reloads the configuration whenever it is changed. This can also be triggered manually through the SIGHUP signal.",
			"default": "false",
			"examples": [
				"true"
			]
		},
		"config.reload.interval": {
			"type": "string",
			"description": "How often in seconds Logstash checks the config files for changes. Note that the unit qualifier (s) is required.",
			"default": "3s",
			"examples": [
				"3s"
			]
		},
		"config.debug": {
			"$ref": "#/definitions/booleanOrString",
			"description": "When set to true, shows the fully compiled configuration as a debug log message. You must also set log.level: debug. WARNING: The log message will include any password options passed to plugin configs as plaintext, and may result in plaintext passwords appearing in your logs!",
			"default": "false",
			"examples": [
				"true"
			]
		},
		"config.support_escapes": {
			"$ref": "#/definitions/booleanOrString",
			"description": "When set to true, quoted strings will process the following escape sequences: \\n becomes a literal newline (ASCII 10). \\r becomes a literal carriage return (ASCII 13). \\t becomes a literal tab (ASCII 9). \\\\ becomes a literal backslash \\. \\\" becomes a literal double quotation mark. \\' becomes a literal quotation mark.",
			"default": "false",
			"examples": [
				"true"
			]
		},
		"config.field_reference.escape_style": {
			"type": "string",
			"description": "Provides a way to reference fields that contain field reference special characters [ and ].\nThis feature is in technical preview and may change in the future.\nCurrent options are:\npercent: URI-style %+HH hexadecimal encoding of UTF-8 bytes ([ → %5B; ] → %5D)\nampersand: HTML-style &#+DD+; encoding of decimal Unicode code-points ([ → &#91;; ] → &#93;)\nnone: field names containing special characters cannot be referenced.\nSince Logstash 8.3",
			"default": "none",
			"examples": [
				"percent",
				"ampersand"
			]
		},
		"modules": {
			"type": "array",
			"description": "When configured, modules must be in the nested YAML structure described above this table. There is no default value.",
			"items": {
				"type": "object",
				"required": [
					"name"
				],
				"properties": {
					"name": {
						"type": "string",
						"description": "Module name. There is no default value."
					}
				}
			}
		},
		"queue.type": {
			"type": "string",
			"description": "The internal queuing model to use for event buffering. Specify memory for legacy in-memory based queuing, or persisted for disk-based ACKed queueing (persistent queues).",
			"default": "memory",
			"examples": [
				"persisted"
			]
		},
		"path.queue": {
			"type": "string",
			"description": "The directory path where the data files will be stored when persistent queues are enabled (queue.type: persisted).",
			"default": "\"<path.data>/queue\"",
			"examples": [
				"\"<path.data>/queue\""
			]
		},
		"queue.page_capacity": {
			"type": "string",
			"description": "The size of the page data files used when persistent queues are enabled (queue.type: persisted). The queue data consists of append-only data files separated into pages.",
			"default": "64mb",
			"examples": [
				"64mb"
			]
		},
		"queue.max_events": {
			"$ref": "#/definitions/integerOrString",
			"description": "The maximum number of unread events in the queue when persistent queues are enabled (queue.type: persisted). Default is 0, that is to say unlimited.",
			"default": "0",
			"examples": [
				"0"
			]
		},
		"queue.max_bytes": {
			"type": "string",
			"description": "The total capacity of the queue in number of bytes. Make sure the capacity of your disk drive is greater than the value you specify here. If both queue.max_events and queue.max_bytes are specified, Logstash uses whichever criteria is reached first.",
			"default": "1024mb",
			"examples": [
				"1024mb"
			]
		},
		"queue.checkpoint.acks": {
			"$ref": "#/definitions/integerOrString",
			"description": "The maximum number of ACKed events before forcing a checkpoint when persistent queues are enabled (queue.type: persisted). Specify queue.checkpoint.acks: 0 to set this value to unlimited.",
			"default": "1024",
			"examples": [
				"1024"
			]
		},
		"queue.checkpoint.writes": {
			"$ref": "#/definitions/integerOrString",
			"description": "The maximum number of written events before forcing a checkpoint when persistent queues are enabled (queue.type: persisted). Specify queue.checkpoint.writes: 0 to set this value to unlimited.",
			"default": "1024",
			"examples": [
				"1024"
			]
		},
		"queue.checkpoint.retry": {
			"$ref": "#/definitions/booleanOrString",
			"description": "When enabled, Logstash will retry once per attempted checkpoint write for any checkpoint writes that fail. Any subsequent errors are not retried. This is a workaround for failed checkpoint writes that have been seen only on filesystems with non-standard behavior such as SANs and is not recommended except in those specific circumstances.",
			"default": "false",
			"examples": [
				"true"
			]
		},
		"queue.drain": {
			"$ref": "#/definitions/booleanOrString",
			"description": "When enabled, Logstash waits until the persistent queue is drained before shutting down.",
			"default": "false",
			"examples": [
				"true"
			]
		},
		"dead_letter_queue.enable": {
			"$ref": "#/definitions/booleanOrString",
			"description": "Flag to instruct Logstash to enable the DLQ feature supported by plugins.",
			"default": "false",
			"examples": [
				"true"
			]
		},
		"dead_letter_queue.max_bytes": {
			"type": "string",
			"description": "The maximum size of each dead letter queue. Entries will be dropped if they would increase the size of the dead letter queue beyond this setting.",
			"default": "1024mb",
			"examples": [
				"1024mb"
			]
		},
		"dead_letter_queue.storage_policy": {
			"type": "string",
			"description": "Defines the action to take when the dead_letter_queue.max_bytes setting is reached:\ndrop_newer stops accepting new values that would push the file size over the limit, and drop_older removes the oldest events to make space for new ones.\nSince Logstash 8.3",
			"default": "drop_newer",
			"examples": ["drop_older"]
		},
		"path.dead_letter_queue": {
			"type": "string",
			"description": "The directory path where the data files will be stored for the dead-letter queue.",
			"default": "\"<path.data>/dead_letter_queue\"",
			"examples": [
				"\"<path.data>/dead_letter_queue\""
			]
		},
		"http.host": {
			"type": "string",
			"description": "The bind address for the metrics REST endpoint.\nSince Logstash 7.16, use 'api.http.host' setting instead.",
			"default": "127.0.0.1",
			"examples": [
				"127.0.0.1"
			]
		},
		"http.port": {
			"$ref": "#/definitions/integerOrString",
			"description": "The bind port for the metrics REST endpoint.\nSince Logstash 7.16, use 'api.http.port' setting instead.",
			"default": "9600",
			"examples": [
				"9600"
			]
		},
		"api.enabled": {
			"$ref": "#/definitions/booleanOrString",
			"description": "The HTTP API is enabled by default. It can be disabled, but features that rely on it will not work as intended.\nSince Logstash 7.16",
			"default": "true",
			"examples": [
				"false"
			]
		},
		"api.environment": {
			"type": "string",
			"description": "The API returns the provided string as a part of its response. Setting your environment may help to disambiguate between similarly-named nodes in production vs test environments.\nSince Logstash 7.16",
			"default": "production"
		},
		"api.http.host": {
			"type": "string",
			"description": "The bind address for the HTTP API endpoint. By default, the Logstash HTTP API binds only to the local loopback interface. When configured securely (api.ssl.enabled: true and api.auth.type: basic), the HTTP API binds to all available interfaces.\nSince Logstash 7.16",
			"default": "\"127.0.0.1\""
		},
		"api.http.port": {
			"type": "string",
			"description": "The bind port for the HTTP API endpoint.\nSince Logstash 7.16",
			"default": "9600-9700"
		},
		"api.ssl.enabled": {
			"$ref": "#/definitions/booleanOrString",
			"description": "Set to true to enable SSL on the HTTP API. Doing so requires both api.ssl.keystore.path and api.ssl.keystore.password to be set.\nSince Logstash 7.16",
			"default": "false",
			"examples": [
				"true"
			]
		},
		"api.ssl.keystore.path": {
			"type": "string",
			"description": "The path to a valid JKS or PKCS12 keystore for use in securing the Logstash API. The keystore must be password-protected, and must contain a single certificate chain and a private key. This setting is ignored unless api.ssl.enabled is set to true.\nSince Logstash 7.16",
			"default": "",
			"examples": [
				"/path/to/keystore.p12"
			]
		},
		"api.ssl.keystore.password": {
			"type": "string",
			"description": "The password to the keystore provided with api.ssl.keystore.path. This setting is ignored unless api.ssl.enabled is set to true.\nSince Logstash 7.16",
			"default": "",
			"examples": [
				"password"
			]
		},
		"api.ssl.supported_protocols": {
			"type": "string",
			"description": "List of allowed SSL/TLS versions to use when establishing a secure connection. The availability of protocols depends on the JVM version. Certain protocols are disabled by default and need to be enabled manually by changing jdk.tls.disabledAlgorithms in the $JDK_HOME/conf/security/java.security configuration file.\nPossible values are: TLSv1, TLSv1.1, TLSv1.2 and TLSv1.3.\nSince Logstash 8.10",
			"examples": ["TLSv1", "TLSv1.1", "TLSv1.2", "TLSv1.3"]
		},
		"api.auth.type": {
			"type": "string",
			"description": "Set to 'basic' to require HTTP Basic auth on the API using the credentials supplied with api.auth.basic.username and api.auth.basic.password.\nSince Logstash 7.16",
			"default": "none",
			"examples": [
				"basic"
			]
		},
		"api.auth.basic.username": {
			"type": "string",
			"description": "The username to require for HTTP Basic auth Ignored unless api.auth.type is set to basic.\nSince Logstash 7.16",
			"examples": [
				"username"
			]
		},
		"api.auth.basic.password": {
			"type": "string",
			"description": "The password to require for HTTP Basic auth Ignored unless api.auth.type is set to basic.\nSince Logstash 7.16",
			"examples": [
				"password"
			]
		},
		"api.auth.basic.password_policy.mode": {
			"type": "string",
			"description": "Raises either WARN or ERROR message when password requirements are not met.\nIgnored unless api.auth.type is set to basic.\nSince Logstash 8.3",
			"default": "WARN",
			"examples": ["ERROR"]
		},
		"log.level": {
			"type": "string",
			"description": "The log level. Valid options are: fatal, error, warn, info, debug, trace",
			"default": "info",
			"examples": [
				"fatal",
				"error",
				"warn",
				"info",
				"debug",
				"trace"
			]
		},
		"log.format": {
			"type": "string",
			"description": "The log format. Set to json to log in JSON format, or plain to use Object#.inspect.",
			"default": "plain",
			"examples": [
				"plain",
				"json"
			]
		},
		"log.format.json.fix_duplicate_message_fields": {
			"$ref": "#/definitions/booleanOrString",
			"description": "When the log format is json avoid collision of field names in log lines.\nSince Logstash 8.14",
			"default": "false",
			"examples": ["true"]
		},
		"path.logs": {
			"type": "string",
			"description": "The directory where Logstash will write its log to.",
			"default": "\"${LOGSTASH_HOME}/logs\"",
			"examples": [
				"\"${LOGSTASH_HOME}/logs\""
			]
		},
		"pipeline.separate_logs": {
			"$ref": "#/definitions/booleanOrString",
			"description": "This a boolean setting to enable separation of logs per pipeline in different log files. If enabled Logstash will create a different log file for each pipeline, using the pipeline.id as name of the file. The destination directory is taken from the `path.log`s setting. When there are many pipelines configured in Logstash, separating each log lines per pipeline could be helpful in case you need to troubleshoot what’s happening in a single pipeline, without interference of the other ones.",
			"default": "false",
			"examples": [
				"true"
			]
		},
		"path.plugins": {
			"type": "string",
			"description": "Where to find custom plugins. You can specify this setting multiple times to include multiple paths. Plugins are expected to be in a specific directory hierarchy: PATH/logstash/TYPE/NAME.rb where TYPE is inputs, filters, outputs, or codecs, and NAME is the name of the plugin. Default value is platform-specific, see Logstash Directory Layout."
		},
		"allow_superuser": {
			"$ref": "#/definitions/booleanOrString",
			"description": "Setting to true to allow or false to block running Logstash as a superuser.\nSince Logstash 8.3",
			"default": "true",
			"examples": ["false"]
		},
		"event_api.tags.illegal": {
			"type": "string",
			"description": "When set to warn, allow illegal value assignment to the reserved tags field.\nWhen set to rename, Logstash events can’t be created with an illegal value in tags. This value will be moved to _tags and a _tagsparsefailure tag is added to indicate the illegal operation. Doing set operation with illegal value will throw exception.\nSetting this flag to warn is deprecated and will be removed in a future release.\nSince Logstash 8.7",
			"default": "rename",
			"examples": ["warn", "rename"]
		},
		"pipeline.buffer.type": {
			"type": "string",
			"description": "Determine where to allocate memory buffers, for plugins that leverage them. Default to direct, optionally can be switched to heap to select Java heap space.\nSince Logstash 8.14",
			"default": "direct",
			"examples": ["heap"]
		}
	}
}