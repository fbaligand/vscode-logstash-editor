{
  "$schema" : "http://json-schema.org/draft-07/schema#",
  "definitions" : {
    "composable_index_template" : {
      "type" : "object",
      "properties" : {
        "index_patterns" : {
          "$ref" : "#/definitions/_types:Indices"
        },
        "composed_of" : {
          "description" : "Specific to composable index templates.\nAn ordered list of component template names.\nComponent templates are merged in the order specified, meaning that the last component template specified has the highest precedence.",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/_types:Name"
          }
        },
        "template" : {
          "$ref" : "#/definitions/indices.put_index_template:IndexTemplateMapping",
          "description" : "Specific to composable index templates."
        },
        "data_stream" : {
          "$ref" : "#/definitions/indices._types:DataStreamVisibility",
          "description" : "Specific to composable index templates."
        },
        "priority" : {
          "description" : "Specific to composable index templates.\nPriority to determine index template precedence when a new data stream or index is created.\nThe index template with the highest priority is chosen.\nIf no priority is specified the template is treated as though it is of priority 0 (lowest priority).\nThis number is not automatically generated by Elasticsearch.",
          "type" : "number"
        },
        "version" : {
          "$ref" : "#/definitions/_types:VersionNumber"
        },
        "_meta" : {
          "$ref" : "#/definitions/_types:Metadata",
          "description" : "Specific to composable index templates."
        },
        "allow_auto_create" : {
          "description" : "Specific to composable index templates.\nThis setting overrides the value of the `action.auto_create_index` cluster setting.\nIf set to `true` in a template, then indices can be automatically created using that template even if auto-creation of indices is disabled via `actions.auto_create_index`.\nIf set to `false`, then indices or data streams matching the template must always be explicitly created, and may never be automatically created.",
          "type" : "boolean"
        },
        "ignore_missing_component_templates" : {
          "description" : "Specific to composable index templates.\nThe configuration option ignore_missing_component_templates can be used when an index template\nreferences a component template that might not exist",
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "deprecated" : {
          "description" : "Specific to composable index templates.\nMarks this index template as deprecated. When creating or updating a non-deprecated index template\nthat uses deprecated components, Elasticsearch will emit a deprecation warning.",
          "type" : "boolean"
        }
      },
      "required" : [ "index_patterns" ]
    },
    "_types:Name" : {
      "type" : "string"
    },
    "_types:VersionNumber" : {
      "type" : "number",
      "description" : "A number representing a version"
    },
    "_types:Indices" : {
      "oneOf" : [ {
        "$ref" : "#/definitions/_types:IndexName"
      }, {
        "type" : "array",
        "items" : {
          "$ref" : "#/definitions/_types:IndexName"
        }
      } ],
      "defaultSnippets" : [ {
        "label" : "define index pattern list",
        "body" : [ "${1:logstash-*}" ]
      } ]
    },
    "_types:Metadata" : {
      "type" : "object",
      "additionalProperties" : {
        "type" : "object"
      }
    },
    "indices.put_index_template:IndexTemplateMapping" : {
      "type" : "object",
      "properties" : {
        "aliases" : {
          "description" : "Aliases to add.\nIf the index template includes a `data_stream` object, these are data stream aliases.\nOtherwise, these are index aliases.\nData stream aliases ignore the `index_routing`, `routing`, and `search_routing` options.",
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/indices._types:Alias"
          },
          "defaultSnippets" : [ {
            "label" : "add new alias",
            "body" : {
              "${1:alias1}" : { }
            }
          } ]
        },
        "mappings" : {
          "$ref" : "#/definitions/_types.mapping:TypeMapping"
        },
        "settings" : {
          "$ref" : "#/definitions/indices._types:IndexSettings"
        },
        "lifecycle" : {
          "$ref" : "#/definitions/indices._types:DataStreamLifecycle"
        }
      }
    },
    "indices._types:DataStreamVisibility" : {
      "type" : "object",
      "properties" : {
        "hidden" : {
          "type" : "boolean"
        },
        "allow_custom_routing" : {
          "type" : "boolean",
          "description" : "Since Elasticsearch 8.0",
          "default" : false
        }
      }
    },
    "_types:IndexName" : {
      "type" : "string"
    },
    "indices._types:DataStreamLifecycle" : {
      "type" : "object",
      "properties" : {
        "data_retention" : {
          "$ref" : "#/definitions/_types:Duration"
        },
        "downsampling" : {
          "$ref" : "#/definitions/indices._types:DataStreamLifecycleDownsampling"
        },
        "enabled" : {
          "description" : "If defined, it turns data stream lifecycle on/off (`true`/`false`) for this data stream. A data stream lifecycle\nthat's disabled (enabled: `false`) will have no effect on the data stream.",
          "type" : "boolean"
        }
      }
    },
    "indices._types:Alias" : {
      "type" : "object",
      "properties" : {
        "filter" : {
          "$ref" : "#/definitions/_types.query_dsl:QueryContainer"
        },
        "index_routing" : {
          "$ref" : "#/definitions/_types:Routing"
        },
        "is_hidden" : {
          "description" : "Since Elasticsearch 7.12\nIf `true`, the alias is hidden.\nAll indices for the alias must have the same `is_hidden` value.",
          "type" : "boolean",
          "default" : false
        },
        "is_write_index" : {
          "description" : "If `true`, the index is the write index for the alias.",
          "type" : "boolean",
          "default" : false
        },
        "routing" : {
          "$ref" : "#/definitions/_types:Routing"
        },
        "search_routing" : {
          "$ref" : "#/definitions/_types:Routing"
        }
      }
    },
    "indices._types:IndexSettings" : {
      "type" : "object",
      "properties" : {
        "index" : {
          "$ref" : "#/definitions/indices._types:IndexSettings"
        },
        "mode" : {
          "type" : "string",
          "description" : "Since Elasticsearch 8.14",
          "default" : "standard",
          "examples" : [ "time_series", "logsdb" ]
        },
        "routing_path" : {
          "oneOf" : [ {
            "type" : "string"
          }, {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          } ]
        },
        "soft_deletes" : {
          "$ref" : "#/definitions/indices._types:SoftDeletes"
        },
        "sort" : {
          "$ref" : "#/definitions/indices._types:IndexSegmentSort"
        },
        "number_of_shards" : {
          "oneOf" : [ {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "default" : 1
        },
        "number_of_replicas" : {
          "oneOf" : [ {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "default" : 1
        },
        "number_of_routing_shards" : {
          "type" : "number",
          "default" : "1"
        },
        "check_on_startup" : {
          "$ref" : "#/definitions/indices._types:IndexCheckOnStartup"
        },
        "codec" : {
          "type" : "string",
          "default" : "default"
        },
        "routing_partition_size" : {
          "$ref" : "#/definitions/_spec_utils:Stringifiedinteger"
        },
        "load_fixed_bitset_filters_eagerly" : {
          "type" : "boolean",
          "default" : true
        },
        "hidden" : {
          "oneOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "string"
          } ],
          "default" : false,
          "description" : "Since Elasticsearch 7.9"
        },
        "auto_expand_replicas" : {
          "oneOf" : [ {
            "type" : "string"
          }, {
            "$ref" : "#/definitions/_spec_utils:NullValue"
          } ],
          "default" : "false",
          "examples" : [ "0-1" ]
        },
        "merge" : {
          "$ref" : "#/definitions/indices._types:Merge"
        },
        "search" : {
          "$ref" : "#/definitions/indices._types:SettingsSearch"
        },
        "refresh_interval" : {
          "$ref" : "#/definitions/_types:Duration",
          "default" : "1s"
        },
        "max_result_window" : {
          "type" : "number",
          "default" : "10000"
        },
        "max_inner_result_window" : {
          "type" : "number",
          "default" : "100"
        },
        "max_rescore_window" : {
          "type" : "number",
          "default" : "10000"
        },
        "max_docvalue_fields_search" : {
          "type" : "number",
          "default" : "100"
        },
        "max_script_fields" : {
          "type" : "number",
          "default" : "32"
        },
        "max_ngram_diff" : {
          "type" : "number",
          "default" : "1"
        },
        "max_shingle_diff" : {
          "type" : "number",
          "default" : "3"
        },
        "blocks" : {
          "$ref" : "#/definitions/indices._types:IndexSettingBlocks"
        },
        "max_refresh_listeners" : {
          "type" : "number",
          "default" : "1000"
        },
        "analyze" : {
          "$ref" : "#/definitions/indices._types:SettingsAnalyze"
        },
        "highlight" : {
          "$ref" : "#/definitions/indices._types:SettingsHighlight"
        },
        "max_terms_count" : {
          "type" : "number",
          "default" : "65536"
        },
        "max_regex_length" : {
          "type" : "number",
          "default" : "1000"
        },
        "routing" : {
          "$ref" : "#/definitions/indices._types:IndexRouting"
        },
        "gc_deletes" : {
          "$ref" : "#/definitions/_types:Duration",
          "default" : "60s"
        },
        "default_pipeline" : {
          "$ref" : "#/definitions/_types:PipelineName",
          "default" : "_none"
        },
        "final_pipeline" : {
          "$ref" : "#/definitions/_types:PipelineName",
          "default" : "_none",
          "description" : "Since Elasticsearch 7.5"
        },
        "lifecycle" : {
          "$ref" : "#/definitions/indices._types:IndexSettingsLifecycle"
        },
        "provided_name" : {
          "$ref" : "#/definitions/_types:Name"
        },
        "creation_date" : {
          "$ref" : "#/definitions/_spec_utils:StringifiedEpochTimeUnitMillis"
        },
        "creation_date_string" : {
          "$ref" : "#/definitions/_types:DateTime"
        },
        "uuid" : {
          "$ref" : "#/definitions/_types:Uuid"
        },
        "version" : {
          "$ref" : "#/definitions/indices._types:IndexVersioning"
        },
        "verified_before_close" : {
          "oneOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "string"
          } ],
          "default" : "false"
        },
        "format" : {
          "oneOf" : [ {
            "type" : "string"
          }, {
            "type" : "number"
          } ],
          "default" : "0"
        },
        "max_slices_per_scroll" : {
          "type" : "number",
          "default" : "1024"
        },
        "translog" : {
          "$ref" : "#/definitions/indices._types:Translog"
        },
        "query_string" : {
          "$ref" : "#/definitions/indices._types:SettingsQueryString"
        },
        "priority" : {
          "oneOf" : [ {
            "type" : "number"
          }, {
            "type" : "string"
          } ],
          "default" : "1"
        },
        "top_metrics_max_size" : {
          "type" : "number",
          "default" : 10,
          "description" : "Since Elasticsearch 7.9"
        },
        "analysis" : {
          "$ref" : "#/definitions/indices._types:IndexSettingsAnalysis"
        },
        "settings" : {
          "$ref" : "#/definitions/indices._types:IndexSettings"
        },
        "time_series" : {
          "$ref" : "#/definitions/indices._types:IndexSettingsTimeSeries"
        },
        "queries" : {
          "$ref" : "#/definitions/indices._types:Queries"
        },
        "similarity" : {
          "description" : "Configure custom similarity settings to customize how search results are scored.",
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/indices._types:SettingsSimilarity"
          }
        },
        "mapping" : {
          "$ref" : "#/definitions/indices._types:MappingLimitSettings"
        },
        "indexing.slowlog" : {
          "$ref" : "#/definitions/indices._types:IndexingSlowlogSettings"
        },
        "indexing_pressure" : {
          "$ref" : "#/definitions/indices._types:IndexingPressure"
        },
        "store" : {
          "$ref" : "#/definitions/indices._types:Storage"
        },
        "allocation" : {
          "properties" : {
            "max_retries" : {
              "type" : "integer",
              "default" : 5
            }
          }
        },
        "compound_format" : {
          "type" : "string",
          "default" : "0.1"
        },
        "downsample" : {
          "type" : "object",
          "description" : "Since Elasticsearch 8.5",
          "properties" : {
            "interval" : {
              "type" : "string",
              "default" : ""
            },
            "status" : {
              "type" : "string",
              "default" : "unknown"
            }
          }
        },
        "fielddata" : {
          "type" : "object",
          "properties" : {
            "cache" : {
              "type" : "string",
              "default" : "node"
            }
          }
        },
        "flush_after_merge" : {
          "type" : "string",
          "default" : "512mb"
        },
        "look_ahead_time" : {
          "$ref" : "#/definitions/_types:Duration",
          "default" : "30m"
        },
        "look_back_time" : {
          "$ref" : "#/definitions/_types:Duration",
          "default" : "2h"
        },
        "query" : {
          "type" : "object",
          "properties" : {
            "default_field" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "examples" : [ "*" ]
              }
            },
            "parse" : {
              "type" : "object",
              "properties" : {
                "allow_unmapped_fields" : {
                  "type" : "boolean",
                  "default" : true
                }
              }
            }
          }
        },
        "requests" : {
          "type" : "object",
          "properties" : {
            "cache" : {
              "type" : "object",
              "properties" : {
                "enable" : {
                  "oneOf" : [ {
                    "type" : "boolean"
                  }, {
                    "type" : "string",
                    "enum" : [ "true", "false" ]
                  } ],
                  "default" : true
                }
              }
            }
          }
        }
      }
    },
    "_types.mapping:TypeMapping" : {
      "type" : "object",
      "properties" : {
        "all_field" : {
          "$ref" : "#/definitions/_types.mapping:AllField"
        },
        "date_detection" : {
          "type" : "boolean",
          "default" : true
        },
        "dynamic" : {
          "$ref" : "#/definitions/_types.mapping:DynamicMapping",
          "default" : "true"
        },
        "dynamic_date_formats" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "examples" : [ "strict_date_time", "strict_date_optional_time", "strict_date", "epoch_millis", "epoch_second", "yyyy-MM-dd" ]
          },
          "default" : [ "strict_date_optional_time", "yyyy/MM/dd HH:mm:ss Z||yyyy/MM/dd Z" ]
        },
        "dynamic_templates" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/definitions/_types.mapping:DynamicTemplate"
            },
            "minProperties" : 1,
            "maxProperties" : 1
          },
          "defaultSnippets" : [ {
            "label" : "add new dynamic template",
            "body" : [ {
              "${1:dynamic_template1}" : { }
            } ]
          } ]
        },
        "_field_names" : {
          "$ref" : "#/definitions/_types.mapping:FieldNamesField"
        },
        "index_field" : {
          "$ref" : "#/definitions/_types.mapping:IndexField"
        },
        "_meta" : {
          "$ref" : "#/definitions/_types:Metadata"
        },
        "numeric_detection" : {
          "type" : "boolean",
          "default" : false
        },
        "properties" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/_types.mapping:Property"
          },
          "defaultSnippets" : [ {
            "label" : "add new property",
            "body" : {
              "${1:property1}" : {
                "type" : "$2"
              }
            }
          } ]
        },
        "_routing" : {
          "$ref" : "#/definitions/_types.mapping:RoutingField"
        },
        "_size" : {
          "$ref" : "#/definitions/_types.mapping:SizeField"
        },
        "_source" : {
          "$ref" : "#/definitions/_types.mapping:SourceField"
        },
        "runtime" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/_types.mapping:RuntimeField"
          },
          "description" : "Since Elasticsearch 7.11",
          "defaultSnippets" : [ {
            "label" : "add new runtime field",
            "body" : {
              "${1:runtime_field1}" : {
                "type" : "$2"
              }
            }
          } ]
        },
        "enabled" : {
          "type" : "boolean"
        },
        "subobjects" : {
          "$ref" : "#/definitions/_types.mapping:Subobjects"
        },
        "_data_stream_timestamp" : {
          "$ref" : "#/definitions/_types.mapping:DataStreamTimestamp"
        }
      }
    },
    "indices._types:DataStreamLifecycleDownsampling" : {
      "type" : "object",
      "properties" : {
        "rounds" : {
          "description" : "The list of downsampling rounds to execute as part of this downsampling configuration",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/indices._types:DownsamplingRound"
          }
        }
      },
      "required" : [ "rounds" ]
    },
    "_types.mapping:IndexField" : {
      "type" : "object",
      "properties" : {
        "enabled" : {
          "type" : "boolean"
        }
      },
      "required" : [ "enabled" ]
    },
    "_types.mapping:RoutingField" : {
      "type" : "object",
      "properties" : {
        "required" : {
          "default" : false
        }
      },
      "required" : [ "required" ]
    },
    "indices._types:IndexSegmentSort" : {
      "type" : "object",
      "properties" : {
        "field" : {
          "$ref" : "#/definitions/_types:Fields"
        },
        "order" : {
          "oneOf" : [ {
            "$ref" : "#/definitions/indices._types:SegmentSortOrder"
          }, {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/indices._types:SegmentSortOrder"
            }
          } ]
        },
        "mode" : {
          "oneOf" : [ {
            "$ref" : "#/definitions/indices._types:SegmentSortMode"
          }, {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/indices._types:SegmentSortMode"
            }
          } ]
        },
        "missing" : {
          "oneOf" : [ {
            "$ref" : "#/definitions/indices._types:SegmentSortMissing"
          }, {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/indices._types:SegmentSortMissing"
            }
          } ]
        }
      }
    },
    "indices._types:SettingsQueryString" : {
      "type" : "object",
      "properties" : {
        "lenient" : {
          "$ref" : "#/definitions/_spec_utils:Stringifiedboolean"
        }
      },
      "required" : [ "lenient" ]
    },
    "indices._types:MappingLimitSettings" : {
      "type" : "object",
      "properties" : {
        "coerce" : {
          "type" : "boolean"
        },
        "total_fields" : {
          "$ref" : "#/definitions/indices._types:MappingLimitSettingsTotalFields"
        },
        "depth" : {
          "$ref" : "#/definitions/indices._types:MappingLimitSettingsDepth"
        },
        "nested_fields" : {
          "$ref" : "#/definitions/indices._types:MappingLimitSettingsNestedFields"
        },
        "nested_objects" : {
          "$ref" : "#/definitions/indices._types:MappingLimitSettingsNestedObjects"
        },
        "field_name_length" : {
          "$ref" : "#/definitions/indices._types:MappingLimitSettingsFieldNameLength"
        },
        "dimension_fields" : {
          "$ref" : "#/definitions/indices._types:MappingLimitSettingsDimensionFields"
        },
        "source" : {
          "$ref" : "#/definitions/indices._types:MappingLimitSettingsSourceFields",
          "description" : "Since Elasticsearch 8.16"
        },
        "ignore_malformed" : {
          "oneOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "string"
          } ],
          "examples" : [ true, false ]
        }
      }
    },
    "indices._types:IndexingSlowlogSettings" : {
      "type" : "object",
      "properties" : {
        "level" : {
          "type" : "string",
          "description" : "Removed since Elasticsearch 8.0",
          "default" : "TRACE"
        },
        "source" : {
          "type" : "number",
          "default" : "1000"
        },
        "reformat" : {
          "type" : "boolean",
          "default" : "true"
        },
        "threshold" : {
          "$ref" : "#/definitions/indices._types:IndexingSlowlogTresholds"
        }
      }
    },
    "_types.mapping:DynamicMapping" : {
      "type" : "string",
      "enum" : [ "strict", "runtime", "true", "false" ]
    },
    "indices._types:IndexRouting" : {
      "type" : "object",
      "properties" : {
        "allocation" : {
          "$ref" : "#/definitions/indices._types:IndexRoutingAllocation"
        },
        "rebalance" : {
          "$ref" : "#/definitions/indices._types:IndexRoutingRebalance"
        }
      }
    },
    "_types.mapping:Property" : {
      "discriminator" : {
        "propertyName" : "type"
      },
      "oneOf" : [ {
        "$ref" : "#/definitions/_types.mapping:BinaryProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:BooleanProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:DynamicProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:JoinProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:KeywordProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:MatchOnlyTextProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:PercolatorProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:RankFeatureProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:RankFeaturesProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:SearchAsYouTypeProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:TextProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:VersionProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:WildcardProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:DateNanosProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:DateProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:AggregateMetricDoubleProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:DenseVectorProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:FlattenedProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:NestedProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:ObjectProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:PassthroughObjectProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:SemanticTextProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:SparseVectorProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:CompletionProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:ConstantKeywordProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:CountedKeywordProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:FieldAliasProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:HistogramProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:IpProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:Murmur3HashProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:TokenCountProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:GeoPointProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:GeoShapeProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:PointProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:ShapeProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:ByteNumberProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:DoubleNumberProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:FloatNumberProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:HalfFloatNumberProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:IntegerNumberProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:LongNumberProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:ScaledFloatNumberProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:ShortNumberProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:UnsignedLongNumberProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:DateRangeProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:DoubleRangeProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:FloatRangeProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:IntegerRangeProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:IpRangeProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:LongRangeProperty"
      }, {
        "$ref" : "#/definitions/_types.mapping:IcuCollationProperty"
      } ],
      "defaultSnippets" : [ {
        "label" : "add new property",
        "body" : {
          "type" : "$1"
        }
      } ]
    },
    "indices._types:IndexSettingBlocks" : {
      "type" : "object",
      "properties" : {
        "read_only" : {
          "$ref" : "#/definitions/_spec_utils:Stringifiedboolean",
          "default" : false
        },
        "read_only_allow_delete" : {
          "$ref" : "#/definitions/_spec_utils:Stringifiedboolean",
          "default" : false
        },
        "read" : {
          "$ref" : "#/definitions/_spec_utils:Stringifiedboolean",
          "default" : false
        },
        "write" : {
          "$ref" : "#/definitions/_spec_utils:Stringifiedboolean",
          "default" : false
        },
        "metadata" : {
          "$ref" : "#/definitions/_spec_utils:Stringifiedboolean",
          "default" : false
        }
      }
    },
    "_spec_utils:Stringifiedinteger" : {
      "description" : "Some APIs will return values such as numbers also as a string (notably epoch timestamps). This behavior\nis used to capture this behavior while keeping the semantics of the field type.\n\nDepending on the target language, code generators can keep the union or remove it and leniently parse\nstrings to the target type.",
      "oneOf" : [ {
        "type" : "number"
      }, {
        "type" : "string"
      } ]
    },
    "_spec_utils:NullValue" : {
      "nullable" : true,
      "description" : "A `null` value that is to be interpreted as an actual value, unless other uses of `null` that are equivalent\nto a missing value. It is used for exemple in settings, where using the `NullValue` for a setting will reset\nit to its default value.",
      "type" : "string"
    },
    "_spec_utils:StringifiedEpochTimeUnitMillis" : {
      "description" : "Some APIs will return values such as numbers also as a string (notably epoch timestamps). This behavior\nis used to capture this behavior while keeping the semantics of the field type.\n\nDepending on the target language, code generators can keep the union or remove it and leniently parse\nstrings to the target type.",
      "oneOf" : [ {
        "$ref" : "#/definitions/_types:EpochTimeUnitMillis"
      }, {
        "type" : "string"
      } ]
    },
    "indices._types:Translog" : {
      "type" : "object",
      "properties" : {
        "sync_interval" : {
          "$ref" : "#/definitions/_types:Duration"
        },
        "durability" : {
          "$ref" : "#/definitions/indices._types:TranslogDurability"
        },
        "flush_threshold_size" : {
          "$ref" : "#/definitions/_types:ByteSize"
        },
        "retention" : {
          "$ref" : "#/definitions/indices._types:TranslogRetention"
        }
      }
    },
    "indices._types:IndexSettingsLifecycle" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "$ref" : "#/definitions/_types:Name"
        },
        "indexing_complete" : {
          "$ref" : "#/definitions/_spec_utils:Stringifiedboolean",
          "default" : "false"
        },
        "origination_date" : {
          "description" : "If specified, this is the timestamp used to calculate the index age for its phase transitions. Use this setting\nif you create a new index that contains old data and want to use the original creation date to calculate the index\nage. Specified as a Unix epoch value in milliseconds.",
          "type" : "number"
        },
        "parse_origination_date" : {
          "description" : "Since Elasticsearch 7.5\nSet to true to parse the origination date from the index name. This origination date is used to calculate the index age\nfor its phase transitions. The index name must match the pattern ^.*-{date_format}-\\\\d+, where the date_format is\nyyyy.MM.dd and the trailing digits are optional. An index that was rolled over would normally match the full format,\nfor example logs-2016.10.31-000002). If the index name doesn’t match the pattern, index creation fails.",
          "type" : "boolean",
          "default" : false
        },
        "step" : {
          "$ref" : "#/definitions/indices._types:IndexSettingsLifecycleStep"
        },
        "rollover_alias" : {
          "description" : "The index alias to update when the index rolls over. Specify when using a policy that contains a rollover action.\nWhen the index rolls over, the alias is updated to reflect that the index is no longer the write index. For more\ninformation about rolling indices, see Rollover.",
          "type" : "string"
        },
        "prefer_ilm" : {
          "description" : "Since Elasticsearch 8.8\nPreference for the system that manages a data stream backing index (preferring ILM when both ILM and DLM are\napplicable for an index).",
          "oneOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "string"
          } ],
          "default" : true
        }
      }
    },
    "indices._types:IndexVersioning" : {
      "type" : "object",
      "properties" : {
        "created" : {
          "$ref" : "#/definitions/_types:VersionString"
        },
        "created_string" : {
          "type" : "string"
        }
      }
    },
    "_types.mapping:FieldNamesField" : {
      "type" : "object",
      "properties" : {
        "enabled" : {
          "type" : "boolean",
          "default" : true
        }
      },
      "required" : [ "enabled" ]
    },
    "indices._types:SettingsAnalyze" : {
      "type" : "object",
      "properties" : {
        "max_token_count" : {
          "$ref" : "#/definitions/_spec_utils:Stringifiedinteger",
          "default" : 10000
        }
      }
    },
    "indices._types:IndexSettingsAnalysis" : {
      "type" : "object",
      "properties" : {
        "analyzer" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/_types.analysis:Analyzer"
          },
          "defaultSnippets" : [ {
            "label" : "add new analyzer",
            "body" : {
              "${1:analyzer1}" : {
                "type" : "$2"
              }
            }
          } ]
        },
        "char_filter" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/_types.analysis:CharFilter"
          },
          "defaultSnippets" : [ {
            "label" : "add new char filter",
            "body" : {
              "${1:char_filter1}" : {
                "type" : "$2"
              }
            }
          } ]
        },
        "filter" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/_types.analysis:TokenFilter"
          },
          "defaultSnippets" : [ {
            "label" : "add new filter",
            "body" : {
              "${1:filter1}" : {
                "type" : "$2"
              }
            }
          } ]
        },
        "normalizer" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/_types.analysis:Normalizer"
          },
          "defaultSnippets" : [ {
            "label" : "add new normalizer",
            "body" : {
              "${1:normalizer1}" : {
                "type" : "$2"
              }
            }
          } ]
        },
        "tokenizer" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/_types.analysis:Tokenizer"
          },
          "defaultSnippets" : [ {
            "label" : "add new tokenizer",
            "body" : {
              "${1:tokenizer1}" : {
                "type" : "$2"
              }
            }
          } ]
        }
      }
    },
    "_types.mapping:AllField" : {
      "type" : "object",
      "properties" : {
        "analyzer" : {
          "type" : "string"
        },
        "enabled" : {
          "type" : "boolean"
        },
        "omit_norms" : {
          "type" : "boolean"
        },
        "search_analyzer" : {
          "type" : "string"
        },
        "similarity" : {
          "type" : "string"
        },
        "store" : {
          "type" : "boolean"
        },
        "store_term_vector_offsets" : {
          "type" : "boolean"
        },
        "store_term_vector_payloads" : {
          "type" : "boolean"
        },
        "store_term_vector_positions" : {
          "type" : "boolean"
        },
        "store_term_vectors" : {
          "type" : "boolean"
        }
      },
      "required" : [ "analyzer", "enabled", "omit_norms", "search_analyzer", "similarity", "store", "store_term_vector_offsets", "store_term_vector_payloads", "store_term_vector_positions", "store_term_vectors" ]
    },
    "_types.mapping:RuntimeField" : {
      "type" : "object",
      "properties" : {
        "fields" : {
          "description" : "For type `composite`",
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/_types.mapping:CompositeSubField"
          }
        },
        "fetch_fields" : {
          "description" : "For type `lookup`",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/_types.mapping:RuntimeFieldFetchFields"
          }
        },
        "format" : {
          "description" : "A custom format for `date` type runtime fields.",
          "type" : "string"
        },
        "input_field" : {
          "$ref" : "#/definitions/_types:Field"
        },
        "target_field" : {
          "$ref" : "#/definitions/_types:Field"
        },
        "target_index" : {
          "$ref" : "#/definitions/_types:IndexName",
          "description" : "For type `lookup`"
        },
        "script" : {
          "$ref" : "#/definitions/_types:Script"
        },
        "type" : {
          "$ref" : "#/definitions/_types.mapping:RuntimeFieldType"
        }
      },
      "required" : [ "type" ],
      "description" : "Since Elasticsearch 7.11",
      "defaultSnippets" : [ {
        "label" : "add new runtime property",
        "body" : {
          "type" : "$1"
        }
      } ]
    },
    "_types.mapping:DataStreamTimestamp" : {
      "type" : "object",
      "properties" : {
        "enabled" : {
          "type" : "boolean"
        }
      },
      "required" : [ "enabled" ]
    },
    "_types.mapping:DynamicTemplate" : {
      "allOf" : [ {
        "type" : "object",
        "properties" : {
          "match" : {
            "oneOf" : [ {
              "type" : "string"
            }, {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            } ],
            "examples" : [ "long_*" ]
          },
          "path_match" : {
            "oneOf" : [ {
              "type" : "string"
            }, {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            } ],
            "examples" : [ "name.*" ]
          },
          "unmatch" : {
            "oneOf" : [ {
              "type" : "string"
            }, {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            } ],
            "examples" : [ "*_text" ]
          },
          "path_unmatch" : {
            "oneOf" : [ {
              "type" : "string"
            }, {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            } ],
            "examples" : [ "*.name" ]
          },
          "match_mapping_type" : {
            "oneOf" : [ {
              "type" : "string"
            }, {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            } ],
            "enum" : [ "boolean", "date", "double", "long", "object", "string", "*" ]
          },
          "unmatch_mapping_type" : {
            "oneOf" : [ {
              "type" : "string"
            }, {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            } ],
            "enum" : [ "boolean", "date", "double", "long", "object", "string", "*" ]
          },
          "match_pattern" : {
            "$ref" : "#/definitions/_types.mapping:MatchType"
          }
        }
      }, {
        "type" : "object",
        "properties" : {
          "mapping" : {
            "$ref" : "#/definitions/_types.mapping:Property"
          },
          "runtime" : {
            "$ref" : "#/definitions/_types.mapping:RuntimeField"
          }
        },
        "minProperties" : 1,
        "maxProperties" : 10
      } ]
    },
    "indices._types:IndexCheckOnStartup" : {
      "type" : "string",
      "enum" : [ "true", "false", "checksum" ]
    },
    "_types:Routing" : {
      "type" : "string"
    },
    "indices._types:SettingsSearch" : {
      "type" : "object",
      "properties" : {
        "idle" : {
          "$ref" : "#/definitions/indices._types:SearchIdle"
        },
        "slowlog" : {
          "$ref" : "#/definitions/indices._types:SlowlogSettings"
        }
      }
    },
    "indices._types:IndexSettingsTimeSeries" : {
      "type" : "object",
      "properties" : {
        "end_time" : {
          "$ref" : "#/definitions/_types:DateTime"
        },
        "start_time" : {
          "$ref" : "#/definitions/_types:DateTime"
        }
      }
    },
    "_types:Duration" : {
      "description" : "A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and\n`d` (days). Also accepts \"0\" without a unit and \"-1\" to indicate an unspecified value.",
      "oneOf" : [ {
        "type" : "string"
      }, {
        "type" : "string",
        "enum" : [ "-1" ]
      }, {
        "type" : "string",
        "enum" : [ "0" ]
      } ],
      "examples" : [ "1s" ]
    },
    "indices._types:SettingsSimilarity" : {
      "discriminator" : {
        "propertyName" : "type"
      },
      "oneOf" : [ {
        "$ref" : "#/definitions/indices._types:SettingsSimilarityBm25"
      }, {
        "$ref" : "#/definitions/indices._types:SettingsSimilarityBoolean"
      }, {
        "$ref" : "#/definitions/indices._types:SettingsSimilarityDfi"
      }, {
        "$ref" : "#/definitions/indices._types:SettingsSimilarityDfr"
      }, {
        "$ref" : "#/definitions/indices._types:SettingsSimilarityIb"
      }, {
        "$ref" : "#/definitions/indices._types:SettingsSimilarityLmd"
      }, {
        "$ref" : "#/definitions/indices._types:SettingsSimilarityLmj"
      }, {
        "$ref" : "#/definitions/indices._types:SettingsSimilarityScripted"
      } ]
    },
    "indices._types:IndexingPressure" : {
      "type" : "object",
      "properties" : {
        "memory" : {
          "$ref" : "#/definitions/indices._types:IndexingPressureMemory"
        }
      },
      "required" : [ "memory" ]
    },
    "indices._types:Storage" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "$ref" : "#/definitions/indices._types:StorageType"
        },
        "allow_mmap" : {
          "description" : "You can restrict the use of the mmapfs and the related hybridfs store type via the setting node.store.allow_mmap.\nThis is a boolean setting indicating whether or not memory-mapping is allowed. The default is to allow it. This\nsetting is useful, for example, if you are in an environment where you can not control the ability to create a lot\nof memory maps so you need disable the ability to use memory-mapping.",
          "type" : "boolean"
        }
      },
      "required" : [ "type" ]
    },
    "_types.query_dsl:QueryContainer" : {
      "externalDocs" : {
        "url" : "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html"
      },
      "description" : "An Elasticsearch Query DSL (Domain Specific Language) object that defines a query.",
      "type" : "object",
      "properties" : {
        "bool" : {
          "$ref" : "#/definitions/_types.query_dsl:BoolQuery"
        },
        "boosting" : {
          "$ref" : "#/definitions/_types.query_dsl:BoostingQuery"
        },
        "common" : {
          "deprecated" : true,
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/_types.query_dsl:CommonTermsQuery"
          },
          "minProperties" : 1,
          "maxProperties" : 1
        },
        "combined_fields" : {
          "$ref" : "#/definitions/_types.query_dsl:CombinedFieldsQuery"
        },
        "constant_score" : {
          "$ref" : "#/definitions/_types.query_dsl:ConstantScoreQuery"
        },
        "dis_max" : {
          "$ref" : "#/definitions/_types.query_dsl:DisMaxQuery"
        },
        "distance_feature" : {
          "$ref" : "#/definitions/_types.query_dsl:DistanceFeatureQuery"
        },
        "exists" : {
          "$ref" : "#/definitions/_types.query_dsl:ExistsQuery"
        },
        "function_score" : {
          "$ref" : "#/definitions/_types.query_dsl:FunctionScoreQuery"
        },
        "fuzzy" : {
          "externalDocs" : {
            "url" : "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-fuzzy-query.html"
          },
          "description" : "Returns documents that contain terms similar to the search term, as measured by a Levenshtein edit distance.",
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/_types.query_dsl:FuzzyQuery"
          },
          "minProperties" : 1,
          "maxProperties" : 1
        },
        "geo_bounding_box" : {
          "$ref" : "#/definitions/_types.query_dsl:GeoBoundingBoxQuery"
        },
        "geo_distance" : {
          "$ref" : "#/definitions/_types.query_dsl:GeoDistanceQuery"
        },
        "geo_grid" : {
          "description" : "Matches `geo_point` and `geo_shape` values that intersect a grid cell from a GeoGrid aggregation.",
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/_types.query_dsl:GeoGridQuery"
          },
          "minProperties" : 1,
          "maxProperties" : 1
        },
        "geo_polygon" : {
          "$ref" : "#/definitions/_types.query_dsl:GeoPolygonQuery"
        },
        "geo_shape" : {
          "$ref" : "#/definitions/_types.query_dsl:GeoShapeQuery"
        },
        "has_child" : {
          "$ref" : "#/definitions/_types.query_dsl:HasChildQuery"
        },
        "has_parent" : {
          "$ref" : "#/definitions/_types.query_dsl:HasParentQuery"
        },
        "ids" : {
          "$ref" : "#/definitions/_types.query_dsl:IdsQuery"
        },
        "intervals" : {
          "externalDocs" : {
            "url" : "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-intervals-query.html"
          },
          "description" : "Returns documents based on the order and proximity of matching terms.",
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/_types.query_dsl:IntervalsQuery"
          },
          "minProperties" : 1,
          "maxProperties" : 1
        },
        "knn" : {
          "$ref" : "#/definitions/_types:KnnQuery"
        },
        "match" : {
          "externalDocs" : {
            "url" : "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html"
          },
          "description" : "Returns documents that match a provided text, number, date or boolean value.\nThe provided text is analyzed before matching.",
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/_types.query_dsl:MatchQuery"
          },
          "minProperties" : 1,
          "maxProperties" : 1
        },
        "match_all" : {
          "$ref" : "#/definitions/_types.query_dsl:MatchAllQuery"
        },
        "match_bool_prefix" : {
          "externalDocs" : {
            "url" : "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-bool-prefix-query.html"
          },
          "description" : "Analyzes its input and constructs a `bool` query from the terms.\nEach term except the last is used in a `term` query.\nThe last term is used in a prefix query.",
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/_types.query_dsl:MatchBoolPrefixQuery"
          },
          "minProperties" : 1,
          "maxProperties" : 1
        },
        "match_none" : {
          "$ref" : "#/definitions/_types.query_dsl:MatchNoneQuery"
        },
        "match_phrase" : {
          "externalDocs" : {
            "url" : "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query-phrase.html"
          },
          "description" : "Analyzes the text and creates a phrase query out of the analyzed text.",
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/_types.query_dsl:MatchPhraseQuery"
          },
          "minProperties" : 1,
          "maxProperties" : 1
        },
        "match_phrase_prefix" : {
          "externalDocs" : {
            "url" : "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query-phrase-prefix.html"
          },
          "description" : "Returns documents that contain the words of a provided text, in the same order as provided.\nThe last term of the provided text is treated as a prefix, matching any words that begin with that term.",
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/_types.query_dsl:MatchPhrasePrefixQuery"
          },
          "minProperties" : 1,
          "maxProperties" : 1
        },
        "more_like_this" : {
          "$ref" : "#/definitions/_types.query_dsl:MoreLikeThisQuery"
        },
        "multi_match" : {
          "$ref" : "#/definitions/_types.query_dsl:MultiMatchQuery"
        },
        "nested" : {
          "$ref" : "#/definitions/_types.query_dsl:NestedQuery"
        },
        "parent_id" : {
          "$ref" : "#/definitions/_types.query_dsl:ParentIdQuery"
        },
        "percolate" : {
          "$ref" : "#/definitions/_types.query_dsl:PercolateQuery"
        },
        "pinned" : {
          "$ref" : "#/definitions/_types.query_dsl:PinnedQuery"
        },
        "prefix" : {
          "externalDocs" : {
            "url" : "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-prefix-query.html"
          },
          "description" : "Returns documents that contain a specific prefix in a provided field.",
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/_types.query_dsl:PrefixQuery"
          },
          "minProperties" : 1,
          "maxProperties" : 1
        },
        "query_string" : {
          "$ref" : "#/definitions/_types.query_dsl:QueryStringQuery"
        },
        "range" : {
          "externalDocs" : {
            "url" : "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-range-query.html"
          },
          "description" : "Returns documents that contain terms within a provided range.",
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/_types.query_dsl:RangeQuery"
          },
          "minProperties" : 1,
          "maxProperties" : 1
        },
        "rank_feature" : {
          "$ref" : "#/definitions/_types.query_dsl:RankFeatureQuery"
        },
        "regexp" : {
          "externalDocs" : {
            "url" : "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-regexp-query.html"
          },
          "description" : "Returns documents that contain terms matching a regular expression.",
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/_types.query_dsl:RegexpQuery"
          },
          "minProperties" : 1,
          "maxProperties" : 1
        },
        "rule" : {
          "$ref" : "#/definitions/_types.query_dsl:RuleQuery"
        },
        "script" : {
          "$ref" : "#/definitions/_types.query_dsl:ScriptQuery"
        },
        "script_score" : {
          "$ref" : "#/definitions/_types.query_dsl:ScriptScoreQuery"
        },
        "semantic" : {
          "$ref" : "#/definitions/_types.query_dsl:SemanticQuery"
        },
        "shape" : {
          "$ref" : "#/definitions/_types.query_dsl:ShapeQuery"
        },
        "simple_query_string" : {
          "$ref" : "#/definitions/_types.query_dsl:SimpleQueryStringQuery"
        },
        "span_containing" : {
          "$ref" : "#/definitions/_types.query_dsl:SpanContainingQuery"
        },
        "span_field_masking" : {
          "$ref" : "#/definitions/_types.query_dsl:SpanFieldMaskingQuery"
        },
        "span_first" : {
          "$ref" : "#/definitions/_types.query_dsl:SpanFirstQuery"
        },
        "span_multi" : {
          "$ref" : "#/definitions/_types.query_dsl:SpanMultiTermQuery"
        },
        "span_near" : {
          "$ref" : "#/definitions/_types.query_dsl:SpanNearQuery"
        },
        "span_not" : {
          "$ref" : "#/definitions/_types.query_dsl:SpanNotQuery"
        },
        "span_or" : {
          "$ref" : "#/definitions/_types.query_dsl:SpanOrQuery"
        },
        "span_term" : {
          "externalDocs" : {
            "url" : "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-span-term-query.html"
          },
          "description" : "Matches spans containing a term.",
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/_types.query_dsl:SpanTermQuery"
          },
          "minProperties" : 1,
          "maxProperties" : 1
        },
        "span_within" : {
          "$ref" : "#/definitions/_types.query_dsl:SpanWithinQuery"
        },
        "sparse_vector" : {
          "$ref" : "#/definitions/_types.query_dsl:SparseVectorQuery"
        },
        "term" : {
          "externalDocs" : {
            "url" : "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-term-query.html"
          },
          "description" : "Returns documents that contain an exact term in a provided field.\nTo return a document, the query term must exactly match the queried field's value, including whitespace and capitalization.",
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/_types.query_dsl:TermQuery"
          },
          "minProperties" : 1,
          "maxProperties" : 1
        },
        "terms" : {
          "$ref" : "#/definitions/_types.query_dsl:TermsQuery"
        },
        "terms_set" : {
          "externalDocs" : {
            "url" : "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-terms-set-query.html"
          },
          "description" : "Returns documents that contain a minimum number of exact terms in a provided field.\nTo return a document, a required number of terms must exactly match the field values, including whitespace and capitalization.",
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/_types.query_dsl:TermsSetQuery"
          },
          "minProperties" : 1,
          "maxProperties" : 1
        },
        "text_expansion" : {
          "deprecated" : true,
          "externalDocs" : {
            "url" : "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-text-expansion-query.html"
          },
          "description" : "Uses a natural language processing model to convert the query text into a list of token-weight pairs which are then used in a query against a sparse vector or rank features field.",
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/_types.query_dsl:TextExpansionQuery"
          },
          "minProperties" : 1,
          "maxProperties" : 1
        },
        "weighted_tokens" : {
          "deprecated" : true,
          "externalDocs" : {
            "url" : "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-weighted-tokens-query.html"
          },
          "description" : "Supports returning text_expansion query results by sending in precomputed tokens with the query.",
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/_types.query_dsl:WeightedTokensQuery"
          },
          "minProperties" : 1,
          "maxProperties" : 1
        },
        "wildcard" : {
          "externalDocs" : {
            "url" : "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-wildcard-query.html"
          },
          "description" : "Returns documents that contain terms matching a wildcard pattern.",
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/_types.query_dsl:WildcardQuery"
          },
          "minProperties" : 1,
          "maxProperties" : 1
        },
        "wrapper" : {
          "$ref" : "#/definitions/_types.query_dsl:WrapperQuery"
        },
        "type" : {
          "$ref" : "#/definitions/_types.query_dsl:TypeQuery"
        }
      },
      "minProperties" : 1,
      "maxProperties" : 1
    },
    "indices._types:SettingsHighlight" : {
      "type" : "object",
      "properties" : {
        "max_analyzed_offset" : {
          "type" : "number",
          "default" : "1000000"
        }
      }
    },
    "_types.mapping:Subobjects" : {
      "type" : "string",
      "enum" : [ "true", "false", "auto" ],
      "description" : "Since Elasticsearch 8.3.",
      "default" : "true"
    },
    "indices._types:SoftDeletes" : {
      "type" : "object",
      "properties" : {
        "enabled" : {
          "description" : "Indicates whether soft deletes are enabled on the index.",
          "type" : "boolean"
        },
        "retention_lease" : {
          "$ref" : "#/definitions/indices._types:RetentionLease"
        }
      }
    },
    "_types.mapping:SourceField" : {
      "type" : "object",
      "properties" : {
        "compress" : {
          "type" : "boolean"
        },
        "compress_threshold" : {
          "type" : "string"
        },
        "enabled" : {
          "type" : "boolean"
        },
        "excludes" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "includes" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "mode" : {
          "$ref" : "#/definitions/_types.mapping:SourceFieldMode"
        }
      }
    },
    "indices._types:Queries" : {
      "type" : "object",
      "properties" : {
        "cache" : {
          "$ref" : "#/definitions/indices._types:CacheQueries"
        }
      }
    },
    "_types.mapping:SizeField" : {
      "type" : "object",
      "properties" : {
        "enabled" : {
          "type" : "boolean"
        }
      },
      "required" : [ "enabled" ]
    },
    "_types:Uuid" : {
      "type" : "string"
    },
    "_types:PipelineName" : {
      "type" : "string"
    },
    "_types:DateTime" : {
      "description" : "A date and time, either as a string whose format can depend on the context (defaulting to ISO 8601), or a\nnumber of milliseconds since the Epoch. Elasticsearch accepts both as input, but will generally output a string\nrepresentation.",
      "oneOf" : [ {
        "type" : "string"
      }, {
        "$ref" : "#/definitions/_types:EpochTimeUnitMillis"
      } ]
    },
    "indices._types:Merge" : {
      "type" : "object",
      "properties" : {
        "scheduler" : {
          "$ref" : "#/definitions/indices._types:MergeScheduler"
        }
      }
    },
    "_types.mapping:GeoPointProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:DocValuesPropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "ignore_malformed" : {
            "type" : "boolean"
          },
          "ignore_z_value" : {
            "type" : "boolean"
          },
          "null_value" : {
            "$ref" : "#/definitions/_types:GeoLocation"
          },
          "index" : {
            "type" : "boolean"
          },
          "on_script_error" : {
            "$ref" : "#/definitions/_types.mapping:OnScriptError"
          },
          "script" : {
            "$ref" : "#/definitions/_types:Script"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "geo_point" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.mapping:MatchOnlyTextProperty" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "match_only_text" ]
        },
        "fields" : {
          "description" : "Multi-fields allow the same string value to be indexed in multiple ways for different purposes, such as one\nfield for search and a multi-field for sorting and aggregations, or the same string value analyzed by different analyzers.",
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/_types.mapping:Property"
          }
        },
        "meta" : {
          "description" : "Metadata about the field.",
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "copy_to" : {
          "$ref" : "#/definitions/_types:Fields"
        }
      },
      "required" : [ "type" ]
    },
    "_types.mapping:IcuCollationProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:DocValuesPropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "icu_collation_keyword" ]
          },
          "norms" : {
            "type" : "boolean"
          },
          "index_options" : {
            "$ref" : "#/definitions/_types.mapping:IndexOptions"
          },
          "index" : {
            "description" : "Should the field be searchable?",
            "type" : "boolean"
          },
          "null_value" : {
            "description" : "Accepts a string value which is substituted for any explicit null values. Defaults to null, which means the field is treated as missing.",
            "type" : "string"
          },
          "rules" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          },
          "country" : {
            "type" : "string"
          },
          "variant" : {
            "type" : "string"
          },
          "strength" : {
            "$ref" : "#/definitions/_types.analysis:IcuCollationStrength"
          },
          "decomposition" : {
            "$ref" : "#/definitions/_types.analysis:IcuCollationDecomposition"
          },
          "alternate" : {
            "$ref" : "#/definitions/_types.analysis:IcuCollationAlternate"
          },
          "case_level" : {
            "type" : "boolean"
          },
          "case_first" : {
            "$ref" : "#/definitions/_types.analysis:IcuCollationCaseFirst"
          },
          "numeric" : {
            "type" : "boolean"
          },
          "variable_top" : {
            "type" : "string"
          },
          "hiragana_quaternary_mode" : {
            "type" : "boolean"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.query_dsl:MatchPhraseQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "analyzer" : {
            "description" : "Analyzer used to convert the text in the query value into tokens.",
            "type" : "string"
          },
          "query" : {
            "description" : "Query terms that are analyzed and turned into a phrase query.",
            "type" : "string"
          },
          "slop" : {
            "description" : "Maximum number of positions allowed between matching tokens.",
            "type" : "number"
          },
          "zero_terms_query" : {
            "$ref" : "#/definitions/_types.query_dsl:ZeroTermsQuery"
          }
        },
        "required" : [ "query" ]
      } ]
    },
    "indices._types:MappingLimitSettingsTotalFields" : {
      "type" : "object",
      "properties" : {
        "limit" : {
          "description" : "The maximum number of fields in an index. Field and object mappings, as well as field aliases count towards this limit.\nThe limit is in place to prevent mappings and searches from becoming too large. Higher values can lead to performance\ndegradations and memory issues, especially in clusters with a high load or few resources.",
          "oneOf" : [ {
            "type" : "number"
          }, {
            "type" : "string"
          } ]
        },
        "ignore_dynamic_beyond_limit" : {
          "description" : "This setting determines what happens when a dynamically mapped field would exceed the total fields limit. When set\nto false (the default), the index request of the document that tries to add a dynamic field to the mapping will fail\nwith the message Limit of total fields [X] has been exceeded. When set to true, the index request will not fail.\nInstead, fields that would exceed the limit are not added to the mapping, similar to dynamic: false.\nThe fields that were not added to the mapping will be added to the _ignored field.",
          "oneOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "string"
          } ]
        }
      }
    },
    "_types.query_dsl:CommonTermsQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "analyzer" : {
            "type" : "string"
          },
          "cutoff_frequency" : {
            "type" : "number"
          },
          "high_freq_operator" : {
            "$ref" : "#/definitions/_types.query_dsl:Operator"
          },
          "low_freq_operator" : {
            "$ref" : "#/definitions/_types.query_dsl:Operator"
          },
          "minimum_should_match" : {
            "$ref" : "#/definitions/_types:MinimumShouldMatch"
          },
          "query" : {
            "type" : "string"
          }
        },
        "required" : [ "query" ]
      } ]
    },
    "_types.query_dsl:DistanceFeatureQuery" : {
      "externalDocs" : {
        "url" : "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-distance-feature-query.html"
      },
      "oneOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:UntypedDistanceFeatureQuery"
      }, {
        "$ref" : "#/definitions/_types.query_dsl:GeoDistanceFeatureQuery"
      }, {
        "$ref" : "#/definitions/_types.query_dsl:DateDistanceFeatureQuery"
      } ]
    },
    "_types.query_dsl:ExistsQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "field" : {
            "$ref" : "#/definitions/_types:Field"
          }
        },
        "required" : [ "field" ]
      } ]
    },
    "_types.mapping:GeoShapeProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:DocValuesPropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "coerce" : {
            "type" : "boolean"
          },
          "ignore_malformed" : {
            "type" : "boolean"
          },
          "ignore_z_value" : {
            "type" : "boolean"
          },
          "orientation" : {
            "$ref" : "#/definitions/_types.mapping:GeoOrientation"
          },
          "strategy" : {
            "$ref" : "#/definitions/_types.mapping:GeoStrategy"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "geo_shape" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "indices._types:RetentionLease" : {
      "type" : "object",
      "properties" : {
        "period" : {
          "$ref" : "#/definitions/_types:Duration"
        }
      },
      "required" : [ "period" ]
    },
    "_types.mapping:TextProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:CorePropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "analyzer" : {
            "type" : "string",
            "$ref" : "#/definitions/analyzer_examples"
          },
          "boost" : {
            "type" : "number",
            "default" : 1.0
          },
          "eager_global_ordinals" : {
            "type" : "boolean"
          },
          "fielddata" : {
            "type" : "boolean"
          },
          "fielddata_frequency_filter" : {
            "$ref" : "#/definitions/indices._types:FielddataFrequencyFilter"
          },
          "index" : {
            "type" : "boolean"
          },
          "index_options" : {
            "$ref" : "#/definitions/_types.mapping:IndexOptions"
          },
          "index_phrases" : {
            "type" : "boolean"
          },
          "index_prefixes" : {
            "oneOf" : [ {
              "$ref" : "#/definitions/_types.mapping:TextIndexPrefixes"
            }, {
              "nullable" : true,
              "type" : "string"
            } ]
          },
          "norms" : {
            "type" : "boolean"
          },
          "position_increment_gap" : {
            "type" : "number"
          },
          "search_analyzer" : {
            "type" : "string",
            "$ref" : "#/definitions/analyzer_examples"
          },
          "search_quote_analyzer" : {
            "type" : "string",
            "$ref" : "#/definitions/analyzer_examples"
          },
          "similarity" : {
            "oneOf" : [ {
              "type" : "string"
            }, {
              "nullable" : true,
              "type" : "string"
            } ],
            "examples" : [ "BM25", "boolean" ]
          },
          "term_vector" : {
            "$ref" : "#/definitions/_types.mapping:TermVectorOption"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "text" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.query_dsl:HasParentQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "ignore_unmapped" : {
            "description" : "Indicates whether to ignore an unmapped `parent_type` and not return any documents instead of an error.\nYou can use this parameter to query multiple indices that may not contain the `parent_type`.",
            "type" : "boolean"
          },
          "inner_hits" : {
            "$ref" : "#/definitions/_global.search._types:InnerHits"
          },
          "parent_type" : {
            "$ref" : "#/definitions/_types:RelationName"
          },
          "query" : {
            "$ref" : "#/definitions/_types.query_dsl:QueryContainer"
          },
          "score" : {
            "description" : "Indicates whether the relevance score of a matching parent document is aggregated into its child documents.",
            "type" : "boolean"
          }
        },
        "required" : [ "parent_type", "query" ]
      } ]
    },
    "_types.query_dsl:SemanticQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "field" : {
            "description" : "The field to query, which must be a semantic_text field type",
            "type" : "string"
          },
          "query" : {
            "description" : "The query text",
            "type" : "string"
          }
        },
        "required" : [ "field", "query" ]
      } ]
    },
    "_types.mapping:RankFeatureProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:PropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "positive_score_impact" : {
            "type" : "boolean"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "rank_feature" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types:Script" : {
      "type" : "object",
      "properties" : {
        "source" : {
          "description" : "The script source.",
          "type" : "string"
        },
        "id" : {
          "$ref" : "#/definitions/_types:Id"
        },
        "params" : {
          "description" : "Specifies any named parameters that are passed into the script as variables.\nUse parameters instead of hard-coded values to decrease compile time.",
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "lang" : {
          "$ref" : "#/definitions/_types:ScriptLanguage"
        },
        "options" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "_types.mapping:RuntimeFieldType" : {
      "type" : "string",
      "enum" : [ "boolean", "composite", "date", "double", "geo_point", "ip", "keyword", "long", "lookup" ]
    },
    "indices._types:SlowlogSettings" : {
      "type" : "object",
      "properties" : {
        "level" : {
          "type" : "string",
          "description" : "Removed since Elasticsearch 8.0",
          "default" : "TRACE"
        },
        "source" : {
          "type" : "number",
          "default" : "1000"
        },
        "reformat" : {
          "type" : "boolean",
          "default" : true
        },
        "threshold" : {
          "$ref" : "#/definitions/indices._types:SlowlogTresholds"
        }
      }
    },
    "_types.mapping:IpRangeProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:RangePropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "ip_range" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.query_dsl:IntervalsQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "externalDocs" : {
          "url" : "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-intervals-query.html"
        },
        "type" : "object",
        "properties" : {
          "all_of" : {
            "$ref" : "#/definitions/_types.query_dsl:IntervalsAllOf"
          },
          "any_of" : {
            "$ref" : "#/definitions/_types.query_dsl:IntervalsAnyOf"
          },
          "fuzzy" : {
            "$ref" : "#/definitions/_types.query_dsl:IntervalsFuzzy"
          },
          "match" : {
            "$ref" : "#/definitions/_types.query_dsl:IntervalsMatch"
          },
          "prefix" : {
            "$ref" : "#/definitions/_types.query_dsl:IntervalsPrefix"
          },
          "wildcard" : {
            "$ref" : "#/definitions/_types.query_dsl:IntervalsWildcard"
          }
        },
        "minProperties" : 1,
        "maxProperties" : 1
      } ]
    },
    "_types.mapping:FieldAliasProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:PropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "path" : {
            "$ref" : "#/definitions/_types:Field"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "alias" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.query_dsl:BoolQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "filter" : {
            "description" : "The clause (query) must appear in matching documents.\nHowever, unlike `must`, the score of the query will be ignored.",
            "oneOf" : [ {
              "$ref" : "#/definitions/_types.query_dsl:QueryContainer"
            }, {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/_types.query_dsl:QueryContainer"
              }
            } ]
          },
          "minimum_should_match" : {
            "$ref" : "#/definitions/_types:MinimumShouldMatch"
          },
          "must" : {
            "description" : "The clause (query) must appear in matching documents and will contribute to the score.",
            "oneOf" : [ {
              "$ref" : "#/definitions/_types.query_dsl:QueryContainer"
            }, {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/_types.query_dsl:QueryContainer"
              }
            } ]
          },
          "must_not" : {
            "description" : "The clause (query) must not appear in the matching documents.\nBecause scoring is ignored, a score of `0` is returned for all documents.",
            "oneOf" : [ {
              "$ref" : "#/definitions/_types.query_dsl:QueryContainer"
            }, {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/_types.query_dsl:QueryContainer"
              }
            } ]
          },
          "should" : {
            "description" : "The clause (query) should appear in the matching document.",
            "oneOf" : [ {
              "$ref" : "#/definitions/_types.query_dsl:QueryContainer"
            }, {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/_types.query_dsl:QueryContainer"
              }
            } ]
          }
        }
      } ]
    },
    "_types.query_dsl:DisMaxQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "queries" : {
            "description" : "One or more query clauses.\nReturned documents must match one or more of these queries.\nIf a document matches multiple queries, Elasticsearch uses the highest relevance score.",
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/_types.query_dsl:QueryContainer"
            }
          },
          "tie_breaker" : {
            "description" : "Floating point number between 0 and 1.0 used to increase the relevance scores of documents matching multiple query clauses.",
            "type" : "number"
          }
        },
        "required" : [ "queries" ]
      } ]
    },
    "indices._types:IndexRoutingAllocation" : {
      "type" : "object",
      "properties" : {
        "enable" : {
          "$ref" : "#/definitions/indices._types:IndexRoutingAllocationOptions"
        },
        "include" : {
          "$ref" : "#/definitions/indices._types:IndexRoutingAllocationInclude"
        },
        "initial_recovery" : {
          "$ref" : "#/definitions/indices._types:IndexRoutingAllocationInitialRecovery"
        },
        "disk" : {
          "$ref" : "#/definitions/indices._types:IndexRoutingAllocationDisk"
        }
      }
    },
    "_types.mapping:ShortNumberProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:NumberPropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "short" ]
          },
          "null_value" : {
            "$ref" : "#/definitions/_types:short"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types:EpochTimeUnitMillis" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types:UnitMillis"
      } ]
    },
    "indices._types:SettingsSimilarityBm25" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "BM25" ]
        },
        "b" : {
          "type" : "number"
        },
        "discount_overlaps" : {
          "type" : "boolean"
        },
        "k1" : {
          "type" : "number"
        }
      },
      "required" : [ "type" ]
    },
    "indices._types:StorageType" : {
      "anyOf" : [ {
        "type" : "string",
        "enum" : [ "fs", "niofs", "mmapfs", "hybridfs" ]
      }, {
        "type" : "string"
      } ]
    },
    "_types.mapping:ObjectProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:CorePropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "enabled" : {
            "type" : "boolean"
          },
          "subobjects" : {
            "$ref" : "#/definitions/_types.mapping:Subobjects"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "object" ]
          }
        }
      } ]
    },
    "indices._types:SearchIdle" : {
      "type" : "object",
      "properties" : {
        "after" : {
          "$ref" : "#/definitions/_types:Duration"
        }
      }
    },
    "_types.mapping:DenseVectorProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:PropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "dense_vector" ]
          },
          "dims" : {
            "description" : "Number of vector dimensions. Can't exceed `4096`. If `dims` is not specified, it will be set to the length of\nthe first vector added to the field.",
            "type" : "number"
          },
          "element_type" : {
            "$ref" : "#/definitions/_types.mapping:DenseVectorElementType"
          },
          "index" : {
            "description" : "If `true`, you can search this field using the kNN search API.",
            "type" : "boolean"
          },
          "index_options" : {
            "$ref" : "#/definitions/_types.mapping:DenseVectorIndexOptions"
          },
          "similarity" : {
            "$ref" : "#/definitions/_types.mapping:DenseVectorSimilarity"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.mapping:CountedKeywordProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:PropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "counted_keyword" ]
          },
          "index" : {
            "type" : "boolean"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.query_dsl:GeoGridQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "geogrid" : {
            "$ref" : "#/definitions/_types:GeoTile"
          },
          "geohash" : {
            "$ref" : "#/definitions/_types:GeoHash"
          },
          "geohex" : {
            "$ref" : "#/definitions/_types:GeoHexCell"
          }
        },
        "minProperties" : 1,
        "maxProperties" : 1
      } ]
    },
    "_types.mapping:SparseVectorProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:PropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "sparse_vector" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.query_dsl:CombinedFieldsQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "fields" : {
            "description" : "List of fields to search. Field wildcard patterns are allowed. Only `text` fields are supported, and they must all have the same search `analyzer`.",
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/_types:Field"
            }
          },
          "query" : {
            "description" : "Text to search for in the provided `fields`.\nThe `combined_fields` query analyzes the provided text before performing a search.",
            "type" : "string"
          },
          "auto_generate_synonyms_phrase_query" : {
            "description" : "If true, match phrase queries are automatically created for multi-term synonyms.",
            "type" : "boolean"
          },
          "operator" : {
            "$ref" : "#/definitions/_types.query_dsl:CombinedFieldsOperator"
          },
          "minimum_should_match" : {
            "$ref" : "#/definitions/_types:MinimumShouldMatch"
          },
          "zero_terms_query" : {
            "$ref" : "#/definitions/_types.query_dsl:CombinedFieldsZeroTerms"
          }
        },
        "required" : [ "fields", "query" ]
      } ]
    },
    "indices._types:TranslogRetention" : {
      "type" : "object",
      "properties" : {
        "size" : {
          "$ref" : "#/definitions/_types:ByteSize"
        },
        "age" : {
          "$ref" : "#/definitions/_types:Duration"
        }
      }
    },
    "_spec_utils:Stringifiedboolean" : {
      "description" : "Some APIs will return values such as numbers also as a string (notably epoch timestamps). This behavior\nis used to capture this behavior while keeping the semantics of the field type.\n\nDepending on the target language, code generators can keep the union or remove it and leniently parse\nstrings to the target type.",
      "oneOf" : [ {
        "type" : "boolean"
      }, {
        "type" : "string"
      } ]
    },
    "_types.query_dsl:HasChildQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "ignore_unmapped" : {
            "description" : "Indicates whether to ignore an unmapped `type` and not return any documents instead of an error.",
            "type" : "boolean"
          },
          "inner_hits" : {
            "$ref" : "#/definitions/_global.search._types:InnerHits"
          },
          "max_children" : {
            "description" : "Maximum number of child documents that match the query allowed for a returned parent document.\nIf the parent document exceeds this limit, it is excluded from the search results.",
            "type" : "number"
          },
          "min_children" : {
            "description" : "Minimum number of child documents that match the query required to match the query for a returned parent document.\nIf the parent document does not meet this limit, it is excluded from the search results.",
            "type" : "number"
          },
          "query" : {
            "$ref" : "#/definitions/_types.query_dsl:QueryContainer"
          },
          "score_mode" : {
            "$ref" : "#/definitions/_types.query_dsl:ChildScoreMode"
          },
          "type" : {
            "$ref" : "#/definitions/_types:RelationName"
          }
        },
        "required" : [ "query", "type" ]
      } ]
    },
    "_types.mapping:ConstantKeywordProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:PropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "object"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "constant_keyword" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.mapping:VersionProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:DocValuesPropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "version" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.mapping:SearchAsYouTypeProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:CorePropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "analyzer" : {
            "type" : "string",
            "$ref" : "#/definitions/analyzer_examples"
          },
          "index" : {
            "type" : "boolean"
          },
          "index_options" : {
            "$ref" : "#/definitions/_types.mapping:IndexOptions"
          },
          "max_shingle_size" : {
            "type" : "number"
          },
          "norms" : {
            "type" : "boolean"
          },
          "search_analyzer" : {
            "type" : "string",
            "$ref" : "#/definitions/analyzer_examples"
          },
          "search_quote_analyzer" : {
            "type" : "string",
            "$ref" : "#/definitions/analyzer_examples"
          },
          "similarity" : {
            "oneOf" : [ {
              "type" : "string"
            }, {
              "nullable" : true,
              "type" : "string"
            } ],
            "examples" : [ "BM25", "boolean" ]
          },
          "term_vector" : {
            "$ref" : "#/definitions/_types.mapping:TermVectorOption"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "search_as_you_type" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.query_dsl:TypeQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        },
        "required" : [ "value" ]
      } ]
    },
    "_types.query_dsl:TextExpansionQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "model_id" : {
            "description" : "The text expansion NLP model to use",
            "type" : "string"
          },
          "model_text" : {
            "description" : "The query text",
            "type" : "string"
          },
          "pruning_config" : {
            "$ref" : "#/definitions/_types.query_dsl:TokenPruningConfig"
          }
        },
        "required" : [ "model_id", "model_text" ]
      } ]
    },
    "indices._types:MappingLimitSettingsNestedObjects" : {
      "type" : "object",
      "properties" : {
        "limit" : {
          "description" : "The maximum number of nested JSON objects that a single document can contain across all nested types. This limit helps\nto prevent out of memory errors when a document contains too many nested objects.",
          "type" : "number"
        }
      }
    },
    "indices._types:MappingLimitSettingsFieldNameLength" : {
      "type" : "object",
      "properties" : {
        "limit" : {
          "description" : "Setting for the maximum length of a field name. This setting isn’t really something that addresses mappings explosion but\nmight still be useful if you want to limit the field length. It usually shouldn’t be necessary to set this setting. The\ndefault is okay unless a user starts to add a huge number of fields with really long names. Default is `Long.MAX_VALUE` (no limit).",
          "type" : "number"
        }
      }
    },
    "_types.query_dsl:SpanWithinQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "big" : {
            "$ref" : "#/definitions/_types.query_dsl:SpanQuery"
          },
          "little" : {
            "$ref" : "#/definitions/_types.query_dsl:SpanQuery"
          }
        },
        "required" : [ "big", "little" ]
      } ]
    },
    "indices._types:SegmentSortOrder" : {
      "type" : "string",
      "enum" : [ "asc", "ASC", "desc", "DESC" ]
    },
    "_types.query_dsl:NestedQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "ignore_unmapped" : {
            "description" : "Indicates whether to ignore an unmapped path and not return any documents instead of an error.",
            "type" : "boolean"
          },
          "inner_hits" : {
            "$ref" : "#/definitions/_global.search._types:InnerHits"
          },
          "path" : {
            "$ref" : "#/definitions/_types:Field"
          },
          "query" : {
            "$ref" : "#/definitions/_types.query_dsl:QueryContainer"
          },
          "score_mode" : {
            "$ref" : "#/definitions/_types.query_dsl:ChildScoreMode"
          }
        },
        "required" : [ "path", "query" ]
      } ]
    },
    "_types.query_dsl:WrapperQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "query" : {
            "description" : "A base64 encoded query.\nThe binary data format can be any of JSON, YAML, CBOR or SMILE encodings",
            "type" : "string"
          }
        },
        "required" : [ "query" ]
      } ]
    },
    "_types:VersionString" : {
      "type" : "string",
      "description" : "A string representing a version"
    },
    "_types.query_dsl:QueryStringQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "allow_leading_wildcard" : {
            "description" : "If `true`, the wildcard characters `*` and `?` are allowed as the first character of the query string.",
            "type" : "boolean"
          },
          "analyzer" : {
            "description" : "Analyzer used to convert text in the query string into tokens.",
            "type" : "string"
          },
          "analyze_wildcard" : {
            "description" : "If `true`, the query attempts to analyze wildcard terms in the query string.",
            "type" : "boolean"
          },
          "auto_generate_synonyms_phrase_query" : {
            "description" : "If `true`, match phrase queries are automatically created for multi-term synonyms.",
            "type" : "boolean"
          },
          "default_field" : {
            "$ref" : "#/definitions/_types:Field"
          },
          "default_operator" : {
            "$ref" : "#/definitions/_types.query_dsl:Operator"
          },
          "enable_position_increments" : {
            "description" : "If `true`, enable position increments in queries constructed from a `query_string` search.",
            "type" : "boolean"
          },
          "escape" : {
            "type" : "boolean"
          },
          "fields" : {
            "description" : "Array of fields to search. Supports wildcards (`*`).",
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/_types:Field"
            }
          },
          "fuzziness" : {
            "$ref" : "#/definitions/_types:Fuzziness"
          },
          "fuzzy_max_expansions" : {
            "description" : "Maximum number of terms to which the query expands for fuzzy matching.",
            "type" : "number"
          },
          "fuzzy_prefix_length" : {
            "description" : "Number of beginning characters left unchanged for fuzzy matching.",
            "type" : "number"
          },
          "fuzzy_rewrite" : {
            "$ref" : "#/definitions/_types:MultiTermQueryRewrite"
          },
          "fuzzy_transpositions" : {
            "description" : "If `true`, edits for fuzzy matching include transpositions of two adjacent characters (for example, `ab` to `ba`).",
            "type" : "boolean"
          },
          "lenient" : {
            "description" : "If `true`, format-based errors, such as providing a text value for a numeric field, are ignored.",
            "type" : "boolean"
          },
          "max_determinized_states" : {
            "description" : "Maximum number of automaton states required for the query.",
            "type" : "number"
          },
          "minimum_should_match" : {
            "$ref" : "#/definitions/_types:MinimumShouldMatch"
          },
          "phrase_slop" : {
            "description" : "Maximum number of positions allowed between matching tokens for phrases.",
            "type" : "number"
          },
          "query" : {
            "description" : "Query string you wish to parse and use for search.",
            "type" : "string"
          },
          "quote_analyzer" : {
            "description" : "Analyzer used to convert quoted text in the query string into tokens.\nFor quoted text, this parameter overrides the analyzer specified in the `analyzer` parameter.",
            "type" : "string"
          },
          "quote_field_suffix" : {
            "description" : "Suffix appended to quoted text in the query string.\nYou can use this suffix to use a different analysis method for exact matches.",
            "type" : "string"
          },
          "rewrite" : {
            "$ref" : "#/definitions/_types:MultiTermQueryRewrite"
          },
          "tie_breaker" : {
            "description" : "How to combine the queries generated from the individual search terms in the resulting `dis_max` query.",
            "type" : "number"
          },
          "time_zone" : {
            "$ref" : "#/definitions/_types:TimeZone"
          },
          "type" : {
            "$ref" : "#/definitions/_types.query_dsl:TextQueryType"
          }
        },
        "required" : [ "query" ]
      } ]
    },
    "_types.mapping:FloatRangeProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:RangePropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "float_range" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.query_dsl:MatchNoneQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object"
      } ]
    },
    "_types.query_dsl:SpanContainingQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "big" : {
            "$ref" : "#/definitions/_types.query_dsl:SpanQuery"
          },
          "little" : {
            "$ref" : "#/definitions/_types.query_dsl:SpanQuery"
          }
        },
        "required" : [ "big", "little" ]
      } ]
    },
    "indices._types:MappingLimitSettingsNestedFields" : {
      "type" : "object",
      "properties" : {
        "limit" : {
          "description" : "The maximum number of distinct nested mappings in an index. The nested type should only be used in special cases, when\narrays of objects need to be queried independently of each other. To safeguard against poorly designed mappings, this\nsetting limits the number of unique nested types per index.",
          "type" : "number"
        }
      }
    },
    "_types.query_dsl:GeoBoundingBoxQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "$ref" : "#/definitions/_types.query_dsl:GeoExecution"
          },
          "validation_method" : {
            "$ref" : "#/definitions/_types.query_dsl:GeoValidationMethod"
          },
          "ignore_unmapped" : {
            "description" : "Set to `true` to ignore an unmapped field and not match any documents for this query.\nSet to `false` to throw an exception if the field is not mapped.",
            "type" : "boolean"
          }
        }
      } ]
    },
    "_types.query_dsl:SimpleQueryStringQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "analyzer" : {
            "description" : "Analyzer used to convert text in the query string into tokens.",
            "type" : "string"
          },
          "analyze_wildcard" : {
            "description" : "If `true`, the query attempts to analyze wildcard terms in the query string.",
            "type" : "boolean"
          },
          "auto_generate_synonyms_phrase_query" : {
            "description" : "If `true`, the parser creates a match_phrase query for each multi-position token.",
            "type" : "boolean"
          },
          "default_operator" : {
            "$ref" : "#/definitions/_types.query_dsl:Operator"
          },
          "fields" : {
            "description" : "Array of fields you wish to search.\nAccepts wildcard expressions.\nYou also can boost relevance scores for matches to particular fields using a caret (`^`) notation.\nDefaults to the `index.query.default_field index` setting, which has a default value of `*`.",
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/_types:Field"
            }
          },
          "flags" : {
            "$ref" : "#/definitions/_types.query_dsl:SimpleQueryStringFlags"
          },
          "fuzzy_max_expansions" : {
            "description" : "Maximum number of terms to which the query expands for fuzzy matching.",
            "type" : "number"
          },
          "fuzzy_prefix_length" : {
            "description" : "Number of beginning characters left unchanged for fuzzy matching.",
            "type" : "number"
          },
          "fuzzy_transpositions" : {
            "description" : "If `true`, edits for fuzzy matching include transpositions of two adjacent characters (for example, `ab` to `ba`).",
            "type" : "boolean"
          },
          "lenient" : {
            "description" : "If `true`, format-based errors, such as providing a text value for a numeric field, are ignored.",
            "type" : "boolean"
          },
          "minimum_should_match" : {
            "$ref" : "#/definitions/_types:MinimumShouldMatch"
          },
          "query" : {
            "description" : "Query string in the simple query string syntax you wish to parse and use for search.",
            "type" : "string"
          },
          "quote_field_suffix" : {
            "description" : "Suffix appended to quoted text in the query string.",
            "type" : "string"
          }
        },
        "required" : [ "query" ]
      } ]
    },
    "_types.query_dsl:PinnedQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "externalDocs" : {
          "url" : "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-pinned-query.html"
        },
        "allOf" : [ {
          "type" : "object",
          "properties" : {
            "organic" : {
              "$ref" : "#/definitions/_types.query_dsl:QueryContainer"
            }
          },
          "required" : [ "organic" ]
        }, {
          "type" : "object",
          "properties" : {
            "ids" : {
              "description" : "Document IDs listed in the order they are to appear in results.\nRequired if `docs` is not specified.",
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/_types:Id"
              }
            },
            "docs" : {
              "description" : "Documents listed in the order they are to appear in results.\nRequired if `ids` is not specified.",
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/_types.query_dsl:PinnedDoc"
              }
            }
          },
          "minProperties" : 1,
          "maxProperties" : 1
        } ]
      } ]
    },
    "_types.analysis:Analyzer" : {
      "discriminator" : {
        "propertyName" : "type"
      },
      "oneOf" : [ {
        "$ref" : "#/definitions/_types.analysis:CustomAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:FingerprintAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:KeywordAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:NoriAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:PatternAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:SimpleAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:StandardAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:StopAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:WhitespaceAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:IcuAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:KuromojiAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:SnowballAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:ArabicAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:ArmenianAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:BasqueAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:BengaliAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:BrazilianAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:BulgarianAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:CatalanAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:ChineseAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:CjkAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:CzechAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:DanishAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:DutchAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:EnglishAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:EstonianAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:FinnishAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:FrenchAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:GalicianAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:GermanAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:GreekAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:HindiAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:HungarianAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:IndonesianAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:IrishAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:ItalianAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:LatvianAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:LithuanianAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:NorwegianAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:PersianAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:PortugueseAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:RomanianAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:RussianAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:SerbianAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:SoraniAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:SpanishAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:SwedishAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:TurkishAnalyzer"
      }, {
        "$ref" : "#/definitions/_types.analysis:ThaiAnalyzer"
      } ],
      "defaultSnippets" : [ {
        "label" : "add new analyzer",
        "body" : {
          "type" : "$1"
        }
      } ],
      "properties" : {
        "type" : {
          "type" : "string",
          "$ref" : "#/definitions/analyzer_examples"
        }
      }
    },
    "_types.query_dsl:WeightedTokensQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "tokens" : {
            "description" : "The tokens representing this query",
            "type" : "object",
            "additionalProperties" : {
              "type" : "number"
            }
          },
          "pruning_config" : {
            "$ref" : "#/definitions/_types.query_dsl:TokenPruningConfig"
          }
        },
        "required" : [ "tokens" ]
      } ]
    },
    "_types.query_dsl:MatchPhrasePrefixQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "analyzer" : {
            "description" : "Analyzer used to convert text in the query value into tokens.",
            "type" : "string"
          },
          "max_expansions" : {
            "description" : "Maximum number of terms to which the last provided term of the query value will expand.",
            "type" : "number"
          },
          "query" : {
            "description" : "Text you wish to find in the provided field.",
            "type" : "string"
          },
          "slop" : {
            "description" : "Maximum number of positions allowed between matching tokens.",
            "type" : "number"
          },
          "zero_terms_query" : {
            "$ref" : "#/definitions/_types.query_dsl:ZeroTermsQuery"
          }
        },
        "required" : [ "query" ]
      } ]
    },
    "_types.query_dsl:TermsQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object"
      } ]
    },
    "_types.query_dsl:PercolateQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "document" : {
            "description" : "The source of the document being percolated.",
            "type" : "object"
          },
          "documents" : {
            "description" : "An array of sources of the documents being percolated.",
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          },
          "field" : {
            "$ref" : "#/definitions/_types:Field"
          },
          "id" : {
            "$ref" : "#/definitions/_types:Id"
          },
          "index" : {
            "$ref" : "#/definitions/_types:IndexName"
          },
          "name" : {
            "description" : "The suffix used for the `_percolator_document_slot` field when multiple `percolate` queries are specified.",
            "type" : "string"
          },
          "preference" : {
            "description" : "Preference used to fetch document to percolate.",
            "type" : "string"
          },
          "routing" : {
            "$ref" : "#/definitions/_types:Routing"
          },
          "version" : {
            "$ref" : "#/definitions/_types:VersionNumber"
          }
        },
        "required" : [ "field" ]
      } ]
    },
    "indices._types:MergeScheduler" : {
      "type" : "object",
      "properties" : {
        "max_thread_count" : {
          "$ref" : "#/definitions/_spec_utils:Stringifiedinteger"
        },
        "max_merge_count" : {
          "$ref" : "#/definitions/_spec_utils:Stringifiedinteger"
        }
      }
    },
    "_types.query_dsl:MoreLikeThisQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "analyzer" : {
            "externalDocs" : {
              "url" : "https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis.html"
            },
            "description" : "The analyzer that is used to analyze the free form text.\nDefaults to the analyzer associated with the first field in fields.",
            "type" : "string"
          },
          "boost_terms" : {
            "description" : "Each term in the formed query could be further boosted by their tf-idf score.\nThis sets the boost factor to use when using this feature.\nDefaults to deactivated (0).",
            "type" : "number"
          },
          "fail_on_unsupported_field" : {
            "description" : "Controls whether the query should fail (throw an exception) if any of the specified fields are not of the supported types (`text` or `keyword`).",
            "type" : "boolean"
          },
          "fields" : {
            "description" : "A list of fields to fetch and analyze the text from.\nDefaults to the `index.query.default_field` index setting, which has a default value of `*`.",
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/_types:Field"
            }
          },
          "include" : {
            "description" : "Specifies whether the input documents should also be included in the search results returned.",
            "type" : "boolean"
          },
          "like" : {
            "description" : "Specifies free form text and/or a single or multiple documents for which you want to find similar documents.",
            "oneOf" : [ {
              "$ref" : "#/definitions/_types.query_dsl:Like"
            }, {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/_types.query_dsl:Like"
              }
            } ]
          },
          "max_doc_freq" : {
            "description" : "The maximum document frequency above which the terms are ignored from the input document.",
            "type" : "number"
          },
          "max_query_terms" : {
            "description" : "The maximum number of query terms that can be selected.",
            "type" : "number"
          },
          "max_word_length" : {
            "description" : "The maximum word length above which the terms are ignored.\nDefaults to unbounded (`0`).",
            "type" : "number"
          },
          "min_doc_freq" : {
            "description" : "The minimum document frequency below which the terms are ignored from the input document.",
            "type" : "number"
          },
          "minimum_should_match" : {
            "$ref" : "#/definitions/_types:MinimumShouldMatch"
          },
          "min_term_freq" : {
            "description" : "The minimum term frequency below which the terms are ignored from the input document.",
            "type" : "number"
          },
          "min_word_length" : {
            "description" : "The minimum word length below which the terms are ignored.",
            "type" : "number"
          },
          "routing" : {
            "$ref" : "#/definitions/_types:Routing"
          },
          "stop_words" : {
            "$ref" : "#/definitions/_types.analysis:StopWords"
          },
          "unlike" : {
            "description" : "Used in combination with `like` to exclude documents that match a set of terms.",
            "oneOf" : [ {
              "$ref" : "#/definitions/_types.query_dsl:Like"
            }, {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/_types.query_dsl:Like"
              }
            } ]
          },
          "version" : {
            "$ref" : "#/definitions/_types:VersionNumber"
          },
          "version_type" : {
            "$ref" : "#/definitions/_types:VersionType"
          }
        },
        "required" : [ "like" ]
      } ]
    },
    "_types.analysis:Normalizer" : {
      "discriminator" : {
        "propertyName" : "type"
      },
      "oneOf" : [ {
        "$ref" : "#/definitions/_types.analysis:LowercaseNormalizer"
      }, {
        "$ref" : "#/definitions/_types.analysis:CustomNormalizer"
      } ],
      "defaultSnippets" : [ {
        "label" : "add new normalizer",
        "body" : {
          "type" : "$1"
        }
      } ]
    },
    "_types.mapping:CompletionProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:DocValuesPropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "analyzer" : {
            "type" : "string"
          },
          "contexts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/_types.mapping:SuggestContext"
            }
          },
          "max_input_length" : {
            "type" : "number"
          },
          "preserve_position_increments" : {
            "type" : "boolean"
          },
          "preserve_separators" : {
            "type" : "boolean"
          },
          "search_analyzer" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "completion" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "indices._types:SettingsSimilarityIb" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "IB" ]
        },
        "distribution" : {
          "$ref" : "#/definitions/_types:IBDistribution"
        },
        "lambda" : {
          "$ref" : "#/definitions/_types:IBLambda"
        },
        "normalization" : {
          "$ref" : "#/definitions/_types:Normalization"
        }
      },
      "required" : [ "type", "distribution", "lambda", "normalization" ]
    },
    "_types.mapping:MatchType" : {
      "type" : "string",
      "enum" : [ "simple", "regex" ]
    },
    "indices._types:DownsamplingRound" : {
      "type" : "object",
      "properties" : {
        "after" : {
          "$ref" : "#/definitions/_types:Duration"
        },
        "config" : {
          "$ref" : "#/definitions/indices._types:DownsampleConfig"
        }
      },
      "required" : [ "after", "config" ]
    },
    "indices._types:SegmentSortMissing" : {
      "type" : "string",
      "enum" : [ "_last", "_first" ]
    },
    "_types.mapping:DateProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:DocValuesPropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "boost" : {
            "type" : "number"
          },
          "fielddata" : {
            "$ref" : "#/definitions/indices._types:NumericFielddata"
          },
          "format" : {
            "type" : "string"
          },
          "ignore_malformed" : {
            "type" : "boolean"
          },
          "index" : {
            "type" : "boolean"
          },
          "script" : {
            "$ref" : "#/definitions/_types:Script"
          },
          "on_script_error" : {
            "$ref" : "#/definitions/_types.mapping:OnScriptError"
          },
          "null_value" : {
            "$ref" : "#/definitions/_types:DateTime"
          },
          "precision_step" : {
            "type" : "number"
          },
          "locale" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "date" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "indices._types:CacheQueries" : {
      "type" : "object",
      "properties" : {
        "enabled" : {
          "type" : "boolean"
        }
      },
      "required" : [ "enabled" ]
    },
    "indices._types:IndexingPressureMemory" : {
      "type" : "object",
      "properties" : {
        "limit" : {
          "description" : "Number of outstanding bytes that may be consumed by indexing requests. When this limit is reached or exceeded,\nthe node will reject new coordinating and primary operations. When replica operations consume 1.5x this limit,\nthe node will reject new replica operations. Defaults to 10% of the heap.",
          "type" : "number"
        }
      }
    },
    "_types.query_dsl:GeoPolygonQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "validation_method" : {
            "$ref" : "#/definitions/_types.query_dsl:GeoValidationMethod"
          },
          "ignore_unmapped" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "_types.mapping:CompositeSubField" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "$ref" : "#/definitions/_types.mapping:RuntimeFieldType"
        }
      },
      "required" : [ "type" ]
    },
    "_types.mapping:UnsignedLongNumberProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:NumberPropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "unsigned_long" ]
          },
          "null_value" : {
            "$ref" : "#/definitions/_types:ulong"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "indices._types:MappingLimitSettingsDimensionFields" : {
      "type" : "object",
      "properties" : {
        "limit" : {
          "description" : "[preview] This functionality is in technical preview and may be changed or removed in a future release.\nElastic will work to fix any issues, but features in technical preview are not subject to the support SLA of official GA features.",
          "type" : "number"
        }
      }
    },
    "_types.mapping:Murmur3HashProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:DocValuesPropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "murmur3" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.mapping:PointProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:DocValuesPropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "ignore_malformed" : {
            "type" : "boolean"
          },
          "ignore_z_value" : {
            "type" : "boolean"
          },
          "null_value" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "point" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.mapping:ScaledFloatNumberProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:NumberPropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "scaled_float" ]
          },
          "null_value" : {
            "type" : "number"
          },
          "scaling_factor" : {
            "type" : "number"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.mapping:WildcardProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:DocValuesPropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "wildcard" ]
          },
          "null_value" : {
            "type" : "string"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.mapping:HalfFloatNumberProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:NumberPropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "half_float" ]
          },
          "null_value" : {
            "type" : "number"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.query_dsl:TermQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "$ref" : "#/definitions/_types:FieldValue"
          },
          "case_insensitive" : {
            "description" : "Allows ASCII case insensitive matching of the value with the indexed field values when set to `true`.\nWhen `false`, the case sensitivity of matching depends on the underlying field’s mapping.",
            "type" : "boolean"
          }
        },
        "required" : [ "value" ]
      } ]
    },
    "_types.mapping:BooleanProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:DocValuesPropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "boost" : {
            "type" : "number"
          },
          "fielddata" : {
            "$ref" : "#/definitions/indices._types:NumericFielddata"
          },
          "index" : {
            "type" : "boolean"
          },
          "null_value" : {
            "type" : "boolean"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "boolean" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.mapping:PassthroughObjectProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:CorePropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "passthrough" ]
          },
          "enabled" : {
            "type" : "boolean"
          },
          "priority" : {
            "type" : "number"
          },
          "time_series_dimension" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "_types.mapping:ShapeProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:DocValuesPropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "coerce" : {
            "type" : "boolean"
          },
          "ignore_malformed" : {
            "type" : "boolean"
          },
          "ignore_z_value" : {
            "type" : "boolean"
          },
          "orientation" : {
            "$ref" : "#/definitions/_types.mapping:GeoOrientation"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "shape" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.query_dsl:SpanOrQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "clauses" : {
            "description" : "Array of one or more other span type queries.",
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/_types.query_dsl:SpanQuery"
            }
          }
        },
        "required" : [ "clauses" ]
      } ]
    },
    "_types.query_dsl:MultiMatchQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "analyzer" : {
            "description" : "Analyzer used to convert the text in the query value into tokens.",
            "type" : "string"
          },
          "auto_generate_synonyms_phrase_query" : {
            "description" : "If `true`, match phrase queries are automatically created for multi-term synonyms.",
            "type" : "boolean"
          },
          "cutoff_frequency" : {
            "deprecated" : true,
            "type" : "number"
          },
          "fields" : {
            "$ref" : "#/definitions/_types:Fields"
          },
          "fuzziness" : {
            "$ref" : "#/definitions/_types:Fuzziness"
          },
          "fuzzy_rewrite" : {
            "$ref" : "#/definitions/_types:MultiTermQueryRewrite"
          },
          "fuzzy_transpositions" : {
            "description" : "If `true`, edits for fuzzy matching include transpositions of two adjacent characters (for example, `ab` to `ba`).\nCan be applied to the term subqueries constructed for all terms but the final term.",
            "type" : "boolean"
          },
          "lenient" : {
            "description" : "If `true`, format-based errors, such as providing a text query value for a numeric field, are ignored.",
            "type" : "boolean"
          },
          "max_expansions" : {
            "description" : "Maximum number of terms to which the query will expand.",
            "type" : "number"
          },
          "minimum_should_match" : {
            "$ref" : "#/definitions/_types:MinimumShouldMatch"
          },
          "operator" : {
            "$ref" : "#/definitions/_types.query_dsl:Operator"
          },
          "prefix_length" : {
            "description" : "Number of beginning characters left unchanged for fuzzy matching.",
            "type" : "number"
          },
          "query" : {
            "description" : "Text, number, boolean value or date you wish to find in the provided field.",
            "type" : "string"
          },
          "slop" : {
            "description" : "Maximum number of positions allowed between matching tokens.",
            "type" : "number"
          },
          "tie_breaker" : {
            "description" : "Determines how scores for each per-term blended query and scores across groups are combined.",
            "type" : "number"
          },
          "type" : {
            "$ref" : "#/definitions/_types.query_dsl:TextQueryType"
          },
          "zero_terms_query" : {
            "$ref" : "#/definitions/_types.query_dsl:ZeroTermsQuery"
          }
        },
        "required" : [ "query" ]
      } ]
    },
    "_types.mapping:PercolatorProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:PropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "percolator" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.mapping:FlattenedProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:PropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "boost" : {
            "type" : "number"
          },
          "depth_limit" : {
            "type" : "number"
          },
          "doc_values" : {
            "type" : "boolean"
          },
          "eager_global_ordinals" : {
            "type" : "boolean"
          },
          "index" : {
            "type" : "boolean"
          },
          "index_options" : {
            "$ref" : "#/definitions/_types.mapping:IndexOptions"
          },
          "null_value" : {
            "type" : "string"
          },
          "similarity" : {
            "type" : "string"
          },
          "split_queries_on_whitespace" : {
            "type" : "boolean"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "flattened" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.mapping:AggregateMetricDoubleProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:PropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "aggregate_metric_double" ]
          },
          "default_metric" : {
            "type" : "string"
          },
          "metrics" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "time_series_metric" : {
            "$ref" : "#/definitions/_types.mapping:TimeSeriesMetricType"
          }
        },
        "required" : [ "type", "default_metric", "metrics" ]
      } ]
    },
    "_types.mapping:HistogramProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:PropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "ignore_malformed" : {
            "type" : "boolean"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "histogram" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.query_dsl:SpanMultiTermQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "match" : {
            "$ref" : "#/definitions/_types.query_dsl:QueryContainer"
          }
        },
        "required" : [ "match" ]
      } ]
    },
    "_types.query_dsl:TermsSetQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "minimum_should_match" : {
            "$ref" : "#/definitions/_types:MinimumShouldMatch"
          },
          "minimum_should_match_field" : {
            "$ref" : "#/definitions/_types:Field"
          },
          "minimum_should_match_script" : {
            "$ref" : "#/definitions/_types:Script"
          },
          "terms" : {
            "description" : "Array of terms you wish to find in the provided field.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "required" : [ "terms" ]
      } ]
    },
    "_types.mapping:IntegerRangeProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:RangePropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "integer_range" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "indices._types:SettingsSimilarityLmd" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "LMDirichlet" ]
        },
        "mu" : {
          "type" : "number"
        }
      },
      "required" : [ "type" ]
    },
    "_types.query_dsl:SpanNearQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "clauses" : {
            "description" : "Array of one or more other span type queries.",
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/_types.query_dsl:SpanQuery"
            }
          },
          "in_order" : {
            "description" : "Controls whether matches are required to be in-order.",
            "type" : "boolean"
          },
          "slop" : {
            "description" : "Controls the maximum number of intervening unmatched positions permitted.",
            "type" : "number"
          }
        },
        "required" : [ "clauses" ]
      } ]
    },
    "indices._types:SettingsSimilarityLmj" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "LMJelinekMercer" ]
        },
        "lambda" : {
          "type" : "number"
        }
      },
      "required" : [ "type" ]
    },
    "indices._types:SettingsSimilarityScripted" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "scripted" ]
        },
        "script" : {
          "$ref" : "#/definitions/_types:Script"
        },
        "weight_script" : {
          "$ref" : "#/definitions/_types:Script"
        }
      },
      "required" : [ "type", "script" ]
    },
    "_types.query_dsl:MatchBoolPrefixQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "analyzer" : {
            "description" : "Analyzer used to convert the text in the query value into tokens.",
            "type" : "string"
          },
          "fuzziness" : {
            "$ref" : "#/definitions/_types:Fuzziness"
          },
          "fuzzy_rewrite" : {
            "$ref" : "#/definitions/_types:MultiTermQueryRewrite"
          },
          "fuzzy_transpositions" : {
            "description" : "If `true`, edits for fuzzy matching include transpositions of two adjacent characters (for example, `ab` to `ba`).\nCan be applied to the term subqueries constructed for all terms but the final term.",
            "type" : "boolean"
          },
          "max_expansions" : {
            "description" : "Maximum number of terms to which the query will expand.\nCan be applied to the term subqueries constructed for all terms but the final term.",
            "type" : "number"
          },
          "minimum_should_match" : {
            "$ref" : "#/definitions/_types:MinimumShouldMatch"
          },
          "operator" : {
            "$ref" : "#/definitions/_types.query_dsl:Operator"
          },
          "prefix_length" : {
            "description" : "Number of beginning characters left unchanged for fuzzy matching.\nCan be applied to the term subqueries constructed for all terms but the final term.",
            "type" : "number"
          },
          "query" : {
            "description" : "Terms you wish to find in the provided field.\nThe last term is used in a prefix query.",
            "type" : "string"
          }
        },
        "required" : [ "query" ]
      } ]
    },
    "_types.query_dsl:SparseVectorQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "externalDocs" : {
          "url" : "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-sparse-vector-query.html"
        },
        "allOf" : [ {
          "type" : "object",
          "properties" : {
            "field" : {
              "$ref" : "#/definitions/_types:Field"
            },
            "query" : {
              "description" : "The query text you want to use for search.\nIf inference_id is specified, query must also be specified.",
              "type" : "string"
            },
            "prune" : {
              "description" : "Whether to perform pruning, omitting the non-significant tokens from the query to improve query performance.\nIf prune is true but the pruning_config is not specified, pruning will occur but default values will be used.\nDefault: false",
              "x-state" : "Technical preview",
              "type" : "boolean"
            },
            "pruning_config" : {
              "$ref" : "#/definitions/_types.query_dsl:TokenPruningConfig"
            }
          },
          "required" : [ "field" ]
        }, {
          "type" : "object",
          "properties" : {
            "query_vector" : {
              "description" : "Dictionary of precomputed sparse vectors and their associated weights.\nOnly one of inference_id or query_vector may be supplied in a request.",
              "type" : "object",
              "additionalProperties" : {
                "type" : "number"
              }
            },
            "inference_id" : {
              "$ref" : "#/definitions/_types:Id"
            }
          },
          "minProperties" : 1,
          "maxProperties" : 1
        } ]
      } ]
    },
    "_types.query_dsl:MatchAllQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object"
      } ]
    },
    "_types.query_dsl:ParentIdQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "id" : {
            "$ref" : "#/definitions/_types:Id"
          },
          "ignore_unmapped" : {
            "description" : "Indicates whether to ignore an unmapped `type` and not return any documents instead of an error.",
            "type" : "boolean"
          },
          "type" : {
            "$ref" : "#/definitions/_types:RelationName"
          }
        }
      } ]
    },
    "_types:ByteSize" : {
      "oneOf" : [ {
        "type" : "number"
      }, {
        "type" : "string"
      } ],
      "description" : "A size in bytes. Units can be `gb` (gigabytes), `mb` (megabytes), `kb` (kilobytes)."
    },
    "_types.query_dsl:RuleQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "organic" : {
            "$ref" : "#/definitions/_types.query_dsl:QueryContainer"
          },
          "ruleset_ids" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/_types:Id"
            }
          },
          "match_criteria" : {
            "type" : "object"
          }
        },
        "required" : [ "organic", "ruleset_ids", "match_criteria" ]
      } ]
    },
    "_types.query_dsl:IdsQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "values" : {
            "$ref" : "#/definitions/_types:Ids"
          }
        }
      } ]
    },
    "indices._types:SettingsSimilarityDfr" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "DFR" ]
        },
        "after_effect" : {
          "$ref" : "#/definitions/_types:DFRAfterEffect"
        },
        "basic_model" : {
          "$ref" : "#/definitions/_types:DFRBasicModel"
        },
        "normalization" : {
          "$ref" : "#/definitions/_types:Normalization"
        }
      },
      "required" : [ "type", "after_effect", "basic_model", "normalization" ]
    },
    "_types.mapping:IntegerNumberProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:NumberPropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "integer" ]
          },
          "null_value" : {
            "type" : "number"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types:Field" : {
      "description" : "Path to field or array of paths. Some API's support wildcards in the path to select multiple fields.",
      "type" : "string"
    },
    "_types.query_dsl:SpanNotQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "dist" : {
            "description" : "The number of tokens from within the include span that can’t have overlap with the exclude span.\nEquivalent to setting both `pre` and `post`.",
            "type" : "number"
          },
          "exclude" : {
            "$ref" : "#/definitions/_types.query_dsl:SpanQuery"
          },
          "include" : {
            "$ref" : "#/definitions/_types.query_dsl:SpanQuery"
          },
          "post" : {
            "description" : "The number of tokens after the include span that can’t have overlap with the exclude span.",
            "type" : "number"
          },
          "pre" : {
            "description" : "The number of tokens before the include span that can’t have overlap with the exclude span.",
            "type" : "number"
          }
        },
        "required" : [ "exclude", "include" ]
      } ]
    },
    "_types.query_dsl:FunctionScoreQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "boost_mode" : {
            "$ref" : "#/definitions/_types.query_dsl:FunctionBoostMode"
          },
          "functions" : {
            "description" : "One or more functions that compute a new score for each document returned by the query.",
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/_types.query_dsl:FunctionScoreContainer"
            }
          },
          "max_boost" : {
            "description" : "Restricts the new score to not exceed the provided limit.",
            "type" : "number"
          },
          "min_score" : {
            "description" : "Excludes documents that do not meet the provided score threshold.",
            "type" : "number"
          },
          "query" : {
            "$ref" : "#/definitions/_types.query_dsl:QueryContainer"
          },
          "score_mode" : {
            "$ref" : "#/definitions/_types.query_dsl:FunctionScoreMode"
          }
        }
      } ]
    },
    "_types.mapping:TokenCountProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:DocValuesPropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "analyzer" : {
            "type" : "string"
          },
          "boost" : {
            "type" : "number"
          },
          "index" : {
            "type" : "boolean"
          },
          "null_value" : {
            "type" : "number"
          },
          "enable_position_increments" : {
            "type" : "boolean"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "token_count" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.query_dsl:ScriptScoreQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "min_score" : {
            "description" : "Documents with a score lower than this floating point number are excluded from the search results.",
            "type" : "number"
          },
          "query" : {
            "$ref" : "#/definitions/_types.query_dsl:QueryContainer"
          },
          "script" : {
            "$ref" : "#/definitions/_types:Script"
          }
        },
        "required" : [ "query", "script" ]
      } ]
    },
    "indices._types:MappingLimitSettingsDepth" : {
      "type" : "object",
      "properties" : {
        "limit" : {
          "description" : "The maximum depth for a field, which is measured as the number of inner objects. For instance, if all fields are defined\nat the root object level, then the depth is 1. If there is one object mapping, then the depth is 2, etc.",
          "type" : "number"
        }
      }
    },
    "_types:KnnQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "field" : {
            "$ref" : "#/definitions/_types:Field"
          },
          "query_vector" : {
            "$ref" : "#/definitions/_types:QueryVector"
          },
          "query_vector_builder" : {
            "$ref" : "#/definitions/_types:QueryVectorBuilder"
          },
          "num_candidates" : {
            "description" : "The number of nearest neighbor candidates to consider per shard",
            "type" : "number"
          },
          "k" : {
            "description" : "The final number of nearest neighbors to return as top hits",
            "type" : "number"
          },
          "filter" : {
            "description" : "Filters for the kNN search query",
            "oneOf" : [ {
              "$ref" : "#/definitions/_types.query_dsl:QueryContainer"
            }, {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/_types.query_dsl:QueryContainer"
              }
            } ]
          },
          "similarity" : {
            "description" : "The minimum similarity for a vector to be considered a match",
            "type" : "number"
          },
          "rescore_vector" : {
            "$ref" : "#/definitions/_types:RescoreVector"
          }
        },
        "required" : [ "field" ]
      } ]
    },
    "_types.query_dsl:RegexpQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "case_insensitive" : {
            "description" : "Allows case insensitive matching of the regular expression value with the indexed field values when set to `true`.\nWhen `false`, case sensitivity of matching depends on the underlying field’s mapping.",
            "type" : "boolean"
          },
          "flags" : {
            "description" : "Enables optional operators for the regular expression.",
            "type" : "string"
          },
          "max_determinized_states" : {
            "description" : "Maximum number of automaton states required for the query.",
            "type" : "number"
          },
          "rewrite" : {
            "$ref" : "#/definitions/_types:MultiTermQueryRewrite"
          },
          "value" : {
            "description" : "Regular expression for terms you wish to find in the provided field.",
            "type" : "string"
          }
        },
        "required" : [ "value" ]
      } ]
    },
    "indices._types:MappingLimitSettingsSourceFields" : {
      "type" : "object",
      "properties" : {
        "mode" : {
          "$ref" : "#/definitions/indices._types:SourceMode"
        }
      },
      "required" : [ "mode" ]
    },
    "indices._types:IndexRoutingRebalance" : {
      "type" : "object",
      "properties" : {
        "enable" : {
          "$ref" : "#/definitions/indices._types:IndexRoutingRebalanceOptions"
        }
      },
      "required" : [ "enable" ]
    },
    "indices._types:IndexSettingsLifecycleStep" : {
      "type" : "object",
      "properties" : {
        "wait_time_threshold" : {
          "$ref" : "#/definitions/_types:Duration"
        }
      }
    },
    "_types.mapping:BinaryProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:DocValuesPropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "binary" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.query_dsl:SpanFieldMaskingQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "field" : {
            "$ref" : "#/definitions/_types:Field"
          },
          "query" : {
            "$ref" : "#/definitions/_types.query_dsl:SpanQuery"
          }
        },
        "required" : [ "field", "query" ]
      } ]
    },
    "_types.query_dsl:ConstantScoreQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "filter" : {
            "$ref" : "#/definitions/_types.query_dsl:QueryContainer"
          }
        },
        "required" : [ "filter" ]
      } ]
    },
    "_types.query_dsl:ScriptQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "script" : {
            "$ref" : "#/definitions/_types:Script"
          }
        },
        "required" : [ "script" ]
      } ]
    },
    "indices._types:SettingsSimilarityDfi" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "DFI" ]
        },
        "independence_measure" : {
          "$ref" : "#/definitions/_types:DFIIndependenceMeasure"
        }
      },
      "required" : [ "type", "independence_measure" ]
    },
    "_types.mapping:LongNumberProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:NumberPropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "long" ]
          },
          "null_value" : {
            "type" : "number"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.query_dsl:SpanTermQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        },
        "required" : [ "value" ]
      } ]
    },
    "_types.query_dsl:GeoDistanceQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "distance" : {
            "$ref" : "#/definitions/_types:Distance"
          },
          "distance_type" : {
            "$ref" : "#/definitions/_types:GeoDistanceType"
          },
          "validation_method" : {
            "$ref" : "#/definitions/_types.query_dsl:GeoValidationMethod"
          },
          "ignore_unmapped" : {
            "description" : "Set to `true` to ignore an unmapped field and not match any documents for this query.\nSet to `false` to throw an exception if the field is not mapped.",
            "type" : "boolean"
          }
        },
        "required" : [ "distance" ]
      } ]
    },
    "_types.mapping:DoubleNumberProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:NumberPropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "double" ]
          },
          "null_value" : {
            "type" : "number"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.query_dsl:GeoShapeQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "ignore_unmapped" : {
            "description" : "Set to `true` to ignore an unmapped field and not match any documents for this query.\nSet to `false` to throw an exception if the field is not mapped.",
            "type" : "boolean"
          }
        }
      } ]
    },
    "_types.mapping:LongRangeProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:RangePropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "long_range" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.query_dsl:PrefixQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "rewrite" : {
            "$ref" : "#/definitions/_types:MultiTermQueryRewrite"
          },
          "value" : {
            "description" : "Beginning characters of terms you wish to find in the provided field.",
            "type" : "string"
          },
          "case_insensitive" : {
            "description" : "Allows ASCII case insensitive matching of the value with the indexed field values when set to `true`.\nDefault is `false` which means the case sensitivity of matching depends on the underlying field’s mapping.",
            "type" : "boolean"
          }
        },
        "required" : [ "value" ]
      } ]
    },
    "_types.query_dsl:MatchQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "analyzer" : {
            "description" : "Analyzer used to convert the text in the query value into tokens.",
            "type" : "string"
          },
          "auto_generate_synonyms_phrase_query" : {
            "description" : "If `true`, match phrase queries are automatically created for multi-term synonyms.",
            "type" : "boolean"
          },
          "cutoff_frequency" : {
            "deprecated" : true,
            "type" : "number"
          },
          "fuzziness" : {
            "$ref" : "#/definitions/_types:Fuzziness"
          },
          "fuzzy_rewrite" : {
            "$ref" : "#/definitions/_types:MultiTermQueryRewrite"
          },
          "fuzzy_transpositions" : {
            "description" : "If `true`, edits for fuzzy matching include transpositions of two adjacent characters (for example, `ab` to `ba`).",
            "type" : "boolean"
          },
          "lenient" : {
            "description" : "If `true`, format-based errors, such as providing a text query value for a numeric field, are ignored.",
            "type" : "boolean"
          },
          "max_expansions" : {
            "description" : "Maximum number of terms to which the query will expand.",
            "type" : "number"
          },
          "minimum_should_match" : {
            "$ref" : "#/definitions/_types:MinimumShouldMatch"
          },
          "operator" : {
            "$ref" : "#/definitions/_types.query_dsl:Operator"
          },
          "prefix_length" : {
            "description" : "Number of beginning characters left unchanged for fuzzy matching.",
            "type" : "number"
          },
          "query" : {
            "description" : "Text, number, boolean value or date you wish to find in the provided field.",
            "oneOf" : [ {
              "type" : "string"
            }, {
              "type" : "number"
            }, {
              "type" : "boolean"
            } ]
          },
          "zero_terms_query" : {
            "$ref" : "#/definitions/_types.query_dsl:ZeroTermsQuery"
          }
        },
        "required" : [ "query" ]
      } ]
    },
    "_types:Fields" : {
      "oneOf" : [ {
        "$ref" : "#/definitions/_types:Field"
      }, {
        "type" : "array",
        "items" : {
          "$ref" : "#/definitions/_types:Field"
        }
      } ]
    },
    "_types.mapping:SemanticTextProperty" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "semantic_text" ]
        },
        "meta" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "inference_id" : {
          "$ref" : "#/definitions/_types:Id"
        },
        "search_inference_id" : {
          "$ref" : "#/definitions/_types:Id"
        }
      },
      "required" : [ "type" ]
    },
    "_types.query_dsl:SpanFirstQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "end" : {
            "description" : "Controls the maximum end position permitted in a match.",
            "type" : "number"
          },
          "match" : {
            "$ref" : "#/definitions/_types.query_dsl:SpanQuery"
          }
        },
        "required" : [ "end", "match" ]
      } ]
    },
    "_types.analysis:CharFilter" : {
      "externalDocs" : {
        "url" : "https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-charfilters.html"
      },
      "oneOf" : [ {
        "type" : "string"
      }, {
        "$ref" : "#/definitions/_types.analysis:CharFilterDefinition"
      } ],
      "defaultSnippets" : [ {
        "label" : "add new char filter",
        "body" : {
          "type" : "$1"
        }
      } ]
    },
    "_types.mapping:FloatNumberProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:NumberPropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "float" ]
          },
          "null_value" : {
            "type" : "number"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "indices._types:TranslogDurability" : {
      "type" : "string",
      "enum" : [ "request", "REQUEST", "async", "ASYNC" ]
    },
    "_types.mapping:KeywordProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:DocValuesPropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "boost" : {
            "type" : "number",
            "default" : 1.0
          },
          "eager_global_ordinals" : {
            "type" : "boolean"
          },
          "index" : {
            "type" : "boolean"
          },
          "index_options" : {
            "$ref" : "#/definitions/_types.mapping:IndexOptions"
          },
          "script" : {
            "$ref" : "#/definitions/_types:Script"
          },
          "on_script_error" : {
            "$ref" : "#/definitions/_types.mapping:OnScriptError"
          },
          "normalizer" : {
            "type" : "string",
            "examples" : [ "lowercase" ]
          },
          "norms" : {
            "type" : "boolean"
          },
          "null_value" : {
            "type" : "string"
          },
          "similarity" : {
            "oneOf" : [ {
              "type" : "string"
            }, {
              "nullable" : true,
              "type" : "string"
            } ],
            "examples" : [ "BM25", "boolean" ]
          },
          "split_queries_on_whitespace" : {
            "type" : "boolean"
          },
          "time_series_dimension" : {
            "description" : "For internal use by Elastic only. Marks the field as a time series dimension. Defaults to false.",
            "x-state" : "Technical preview",
            "type" : "boolean"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "keyword" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.mapping:DateNanosProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:DocValuesPropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "boost" : {
            "type" : "number"
          },
          "format" : {
            "type" : "string"
          },
          "ignore_malformed" : {
            "type" : "boolean"
          },
          "index" : {
            "type" : "boolean"
          },
          "script" : {
            "$ref" : "#/definitions/_types:Script"
          },
          "on_script_error" : {
            "$ref" : "#/definitions/_types.mapping:OnScriptError"
          },
          "null_value" : {
            "$ref" : "#/definitions/_types:DateTime"
          },
          "precision_step" : {
            "type" : "number"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "date_nanos" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.mapping:DateRangeProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:RangePropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "format" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "date_range" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.mapping:JoinProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:PropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "relations" : {
            "type" : "object",
            "additionalProperties" : {
              "oneOf" : [ {
                "$ref" : "#/definitions/_types:RelationName"
              }, {
                "type" : "array",
                "items" : {
                  "$ref" : "#/definitions/_types:RelationName"
                }
              } ]
            }
          },
          "eager_global_ordinals" : {
            "type" : "boolean"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "join" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.mapping:NestedProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:CorePropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "enabled" : {
            "type" : "boolean"
          },
          "include_in_parent" : {
            "type" : "boolean"
          },
          "include_in_root" : {
            "type" : "boolean"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "nested" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "indices._types:SettingsSimilarityBoolean" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "boolean" ]
        }
      },
      "required" : [ "type" ]
    },
    "_types.query_dsl:BoostingQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "negative_boost" : {
            "description" : "Floating point number between 0 and 1.0 used to decrease the relevance scores of documents matching the `negative` query.",
            "type" : "number"
          },
          "negative" : {
            "$ref" : "#/definitions/_types.query_dsl:QueryContainer"
          },
          "positive" : {
            "$ref" : "#/definitions/_types.query_dsl:QueryContainer"
          }
        },
        "required" : [ "negative_boost", "negative", "positive" ]
      } ]
    },
    "_types.analysis:Tokenizer" : {
      "externalDocs" : {
        "url" : "https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-tokenizers.html"
      },
      "oneOf" : [ {
        "type" : "string"
      }, {
        "$ref" : "#/definitions/_types.analysis:TokenizerDefinition"
      } ]
    },
    "_types.mapping:DoubleRangeProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:RangePropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "double_range" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.mapping:RankFeaturesProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:PropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "positive_score_impact" : {
            "type" : "boolean"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "rank_features" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.mapping:DynamicProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:DocValuesPropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "{dynamic_type}" ]
          },
          "enabled" : {
            "type" : "boolean"
          },
          "null_value" : {
            "$ref" : "#/definitions/_types:FieldValue"
          },
          "boost" : {
            "type" : "number"
          },
          "coerce" : {
            "type" : "boolean"
          },
          "script" : {
            "$ref" : "#/definitions/_types:Script"
          },
          "on_script_error" : {
            "$ref" : "#/definitions/_types.mapping:OnScriptError"
          },
          "ignore_malformed" : {
            "type" : "boolean"
          },
          "time_series_metric" : {
            "$ref" : "#/definitions/_types.mapping:TimeSeriesMetricType"
          },
          "analyzer" : {
            "type" : "string"
          },
          "eager_global_ordinals" : {
            "type" : "boolean"
          },
          "index" : {
            "type" : "boolean"
          },
          "index_options" : {
            "$ref" : "#/definitions/_types.mapping:IndexOptions"
          },
          "index_phrases" : {
            "type" : "boolean"
          },
          "index_prefixes" : {
            "oneOf" : [ {
              "$ref" : "#/definitions/_types.mapping:TextIndexPrefixes"
            }, {
              "nullable" : true,
              "type" : "string"
            } ]
          },
          "norms" : {
            "type" : "boolean"
          },
          "position_increment_gap" : {
            "type" : "number"
          },
          "search_analyzer" : {
            "type" : "string"
          },
          "search_quote_analyzer" : {
            "type" : "string"
          },
          "term_vector" : {
            "$ref" : "#/definitions/_types.mapping:TermVectorOption"
          },
          "format" : {
            "type" : "string"
          },
          "precision_step" : {
            "type" : "number"
          },
          "locale" : {
            "type" : "string"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:TokenFilter" : {
      "externalDocs" : {
        "url" : "https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-tokenfilters.html"
      },
      "oneOf" : [ {
        "type" : "string"
      }, {
        "$ref" : "#/definitions/_types.analysis:TokenFilterDefinition"
      } ]
    },
    "_types.mapping:SourceFieldMode" : {
      "type" : "string",
      "enum" : [ "disabled", "stored", "synthetic" ]
    },
    "indices._types:IndexingSlowlogTresholds" : {
      "type" : "object",
      "properties" : {
        "index" : {
          "$ref" : "#/definitions/indices._types:SlowlogTresholdLevels"
        }
      }
    },
    "_types.mapping:ByteNumberProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:NumberPropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "byte" ]
          },
          "null_value" : {
            "$ref" : "#/definitions/_types:byte"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.query_dsl:ShapeQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "ignore_unmapped" : {
            "description" : "When set to `true` the query ignores an unmapped field and will not match any documents.",
            "type" : "boolean"
          }
        }
      } ]
    },
    "indices._types:SegmentSortMode" : {
      "type" : "string",
      "enum" : [ "min", "MIN", "max", "MAX" ]
    },
    "_types.query_dsl:RankFeatureQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "field" : {
            "$ref" : "#/definitions/_types:Field"
          },
          "saturation" : {
            "$ref" : "#/definitions/_types.query_dsl:RankFeatureFunctionSaturation"
          },
          "log" : {
            "$ref" : "#/definitions/_types.query_dsl:RankFeatureFunctionLogarithm"
          },
          "linear" : {
            "$ref" : "#/definitions/_types.query_dsl:RankFeatureFunctionLinear"
          },
          "sigmoid" : {
            "$ref" : "#/definitions/_types.query_dsl:RankFeatureFunctionSigmoid"
          }
        },
        "required" : [ "field" ]
      } ]
    },
    "_types.query_dsl:FuzzyQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "max_expansions" : {
            "description" : "Maximum number of variations created.",
            "type" : "number"
          },
          "prefix_length" : {
            "description" : "Number of beginning characters left unchanged when creating expansions.",
            "type" : "number"
          },
          "rewrite" : {
            "$ref" : "#/definitions/_types:MultiTermQueryRewrite"
          },
          "transpositions" : {
            "description" : "Indicates whether edits include transpositions of two adjacent characters (for example `ab` to `ba`).",
            "type" : "boolean"
          },
          "fuzziness" : {
            "$ref" : "#/definitions/_types:Fuzziness"
          },
          "value" : {
            "description" : "Term you wish to find in the provided field.",
            "oneOf" : [ {
              "type" : "string"
            }, {
              "type" : "number"
            }, {
              "type" : "boolean"
            } ]
          }
        },
        "required" : [ "value" ]
      } ]
    },
    "_types.query_dsl:WildcardQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "case_insensitive" : {
            "description" : "Allows case insensitive matching of the pattern with the indexed field values when set to true. Default is false which means the case sensitivity of matching depends on the underlying field’s mapping.",
            "type" : "boolean"
          },
          "rewrite" : {
            "$ref" : "#/definitions/_types:MultiTermQueryRewrite"
          },
          "value" : {
            "description" : "Wildcard pattern for terms you wish to find in the provided field. Required, when wildcard is not set.",
            "type" : "string"
          },
          "wildcard" : {
            "description" : "Wildcard pattern for terms you wish to find in the provided field. Required, when value is not set.",
            "type" : "string"
          }
        }
      } ]
    },
    "_types.mapping:IpProperty" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:DocValuesPropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "boost" : {
            "type" : "number"
          },
          "index" : {
            "type" : "boolean"
          },
          "ignore_malformed" : {
            "type" : "boolean"
          },
          "null_value" : {
            "type" : "string"
          },
          "on_script_error" : {
            "$ref" : "#/definitions/_types.mapping:OnScriptError"
          },
          "script" : {
            "$ref" : "#/definitions/_types:Script"
          },
          "time_series_dimension" : {
            "description" : "For internal use by Elastic only. Marks the field as a time series dimension. Defaults to false.",
            "x-state" : "Technical preview",
            "type" : "boolean"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "ip" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.query_dsl:RangeQuery" : {
      "externalDocs" : {
        "url" : "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-range-query.html"
      },
      "oneOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:UntypedRangeQuery"
      }, {
        "$ref" : "#/definitions/_types.query_dsl:DateRangeQuery"
      }, {
        "$ref" : "#/definitions/_types.query_dsl:NumberRangeQuery"
      }, {
        "$ref" : "#/definitions/_types.query_dsl:TermRangeQuery"
      } ]
    },
    "_types.mapping:RuntimeFieldFetchFields" : {
      "type" : "object",
      "properties" : {
        "field" : {
          "$ref" : "#/definitions/_types:Field"
        },
        "format" : {
          "type" : "string"
        }
      },
      "required" : [ "field" ]
    },
    "_types:MultiTermQueryRewrite" : {
      "type" : "string"
    },
    "_types.analysis:CjkAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "cjk" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        }
      },
      "required" : [ "type" ]
    },
    "_types.query_dsl:GeoDistanceFeatureQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:DistanceFeatureQueryBaseGeoLocationDistance"
      }, {
        "type" : "object"
      } ]
    },
    "_types.analysis:TurkishAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "turkish" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        },
        "stem_exclusion" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "required" : [ "type" ]
    },
    "_types:UnitMillis" : {
      "description" : "Time unit for milliseconds",
      "type" : "number"
    },
    "_types.analysis:SpanishAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "spanish" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        },
        "stem_exclusion" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "required" : [ "type" ]
    },
    "_types.mapping:DocValuesPropertyBase" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:CorePropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "doc_values" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "_types.mapping:CorePropertyBase" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:PropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "copy_to" : {
            "$ref" : "#/definitions/_types:Fields",
            "defaultSnippets" : [ {
              "label" : "set copy_to",
              "body" : [ "${1:another_field}" ]
            } ]
          },
          "store" : {
            "type" : "boolean",
            "default" : false
          }
        }
      } ]
    },
    "_types.query_dsl:DateDistanceFeatureQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:DistanceFeatureQueryBaseDateMathDuration"
      }, {
        "type" : "object"
      } ]
    },
    "_types.mapping:TermVectorOption" : {
      "type" : "string",
      "enum" : [ "no", "yes", "with_offsets", "with_positions", "with_positions_offsets", "with_positions_offsets_payloads", "with_positions_payloads" ]
    },
    "_types.mapping:IndexOptions" : {
      "type" : "string",
      "enum" : [ "docs", "freqs", "positions", "offsets" ]
    },
    "_types.query_dsl:TokenPruningConfig" : {
      "type" : "object",
      "properties" : {
        "tokens_freq_ratio_threshold" : {
          "description" : "Tokens whose frequency is more than this threshold times the average frequency of all tokens in the specified field are considered outliers and pruned.",
          "type" : "number"
        },
        "tokens_weight_threshold" : {
          "description" : "Tokens whose weight is less than this threshold are considered nonsignificant and pruned.",
          "type" : "number"
        },
        "only_score_pruned_tokens" : {
          "description" : "Whether to only score pruned tokens, vs only scoring kept tokens.",
          "type" : "boolean"
        }
      }
    },
    "_types.analysis:ItalianAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "italian" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        },
        "stem_exclusion" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "required" : [ "type" ]
    },
    "_types.analysis:StopWords" : {
      "description" : "Language value, such as _arabic_ or _thai_. Defaults to _english_.\nEach language value corresponds to a predefined list of stop words in Lucene. See Stop words by language for supported language values and their stop words.\nAlso accepts an array of stop words.",
      "oneOf" : [ {
        "type" : "string"
      }, {
        "type" : "array",
        "items" : {
          "type" : "string"
        }
      } ],
      "defaultSnippets" : [ {
        "label" : "define stop words list",
        "body" : [ "$1" ]
      } ]
    },
    "_types.analysis:BengaliAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "bengali" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        },
        "stem_exclusion" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "required" : [ "type" ]
    },
    "_types.mapping:SuggestContext" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "$ref" : "#/definitions/_types:Name"
        },
        "path" : {
          "$ref" : "#/definitions/_types:Field"
        },
        "type" : {
          "type" : "string"
        },
        "precision" : {
          "oneOf" : [ {
            "type" : "number"
          }, {
            "type" : "string"
          } ]
        }
      },
      "required" : [ "name", "type" ]
    },
    "_types:Id" : {
      "type" : "string"
    },
    "_types.analysis:RussianAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "russian" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        },
        "stem_exclusion" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "required" : [ "type" ]
    },
    "_types.analysis:DanishAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "danish" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        }
      },
      "required" : [ "type" ]
    },
    "_types:RescoreVector" : {
      "type" : "object",
      "properties" : {
        "oversample" : {
          "description" : "Applies the specified oversample factor to k on the approximate kNN search",
          "type" : "number"
        }
      },
      "required" : [ "oversample" ]
    },
    "_types:QueryVector" : {
      "type" : "array",
      "items" : {
        "type" : "number"
      }
    },
    "_types.query_dsl:RankFeatureFunctionSaturation" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:RankFeatureFunction"
      }, {
        "type" : "object",
        "properties" : {
          "pivot" : {
            "description" : "Configurable pivot value so that the result will be less than 0.5.",
            "type" : "number"
          }
        }
      } ]
    },
    "_types.analysis:NorwegianAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "norwegian" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        },
        "stem_exclusion" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "required" : [ "type" ]
    },
    "_types:MinimumShouldMatch" : {
      "description" : "The minimum number of terms that should match as integer, percentage or range",
      "oneOf" : [ {
        "type" : "number"
      }, {
        "type" : "string"
      } ]
    },
    "_types.query_dsl:CombinedFieldsOperator" : {
      "type" : "string",
      "enum" : [ "or", "and" ]
    },
    "_types.mapping:NumberPropertyBase" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:DocValuesPropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "boost" : {
            "type" : "number"
          },
          "coerce" : {
            "type" : "boolean"
          },
          "ignore_malformed" : {
            "type" : "boolean"
          },
          "index" : {
            "type" : "boolean"
          },
          "on_script_error" : {
            "$ref" : "#/definitions/_types.mapping:OnScriptError"
          },
          "script" : {
            "$ref" : "#/definitions/_types:Script"
          },
          "time_series_metric" : {
            "$ref" : "#/definitions/_types.mapping:TimeSeriesMetricType"
          },
          "time_series_dimension" : {
            "description" : "For internal use by Elastic only. Marks the field as a time series dimension. Defaults to false.",
            "x-state" : "Technical preview",
            "type" : "boolean"
          }
        }
      } ]
    },
    "_types.analysis:IcuCollationStrength" : {
      "type" : "string",
      "enum" : [ "primary", "secondary", "tertiary", "quaternary", "identical" ]
    },
    "indices._types:IndexRoutingAllocationOptions" : {
      "type" : "string",
      "enum" : [ "all", "primaries", "new_primaries", "none" ]
    },
    "_types.mapping:DenseVectorIndexOptions" : {
      "type" : "object",
      "properties" : {
        "confidence_interval" : {
          "description" : "The confidence interval to use when quantizing the vectors. Can be any value between and including `0.90` and\n`1.0` or exactly `0`. When the value is `0`, this indicates that dynamic quantiles should be calculated for\noptimized quantization. When between `0.90` and `1.0`, this value restricts the values used when calculating\nthe quantization thresholds.\n\nFor example, a value of `0.95` will only use the middle `95%` of the values when calculating the quantization\nthresholds (e.g. the highest and lowest `2.5%` of values will be ignored).\n\nDefaults to `1/(dims + 1)` for `int8` quantized vectors and `0` for `int4` for dynamic quantile calculation.\n\nOnly applicable to `int8_hnsw`, `int4_hnsw`, `int8_flat`, and `int4_flat` index types.",
          "type" : "number"
        },
        "ef_construction" : {
          "description" : "The number of candidates to track while assembling the list of nearest neighbors for each new node.\n\nOnly applicable to `hnsw`, `int8_hnsw`, and `int4_hnsw` index types.",
          "type" : "number"
        },
        "m" : {
          "description" : "The number of neighbors each node will be connected to in the HNSW graph.\n\nOnly applicable to `hnsw`, `int8_hnsw`, and `int4_hnsw` index types.",
          "type" : "number"
        },
        "type" : {
          "$ref" : "#/definitions/_types.mapping:DenseVectorIndexOptionsType"
        }
      },
      "required" : [ "type" ]
    },
    "_types.query_dsl:TermRangeQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:RangeQueryBasestring"
      }, {
        "type" : "object"
      } ]
    },
    "_types.analysis:IcuCollationCaseFirst" : {
      "type" : "string",
      "enum" : [ "lower", "upper" ]
    },
    "_types.analysis:CzechAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "czech" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        },
        "stem_exclusion" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "required" : [ "type" ]
    },
    "_types:VersionType" : {
      "type" : "string",
      "enum" : [ "internal", "external", "external_gte", "force" ]
    },
    "_types.analysis:CustomNormalizer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "custom" ]
        },
        "char_filter" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "examples" : [ "html_strip" ]
          }
        },
        "filter" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "$ref" : "#/definitions/filter_examples"
          },
          "default" : [ ]
        }
      },
      "required" : [ "type" ]
    },
    "_types.analysis:GermanAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "german" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        },
        "stem_exclusion" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "required" : [ "type" ]
    },
    "_types.analysis:HindiAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "hindi" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        },
        "stem_exclusion" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "required" : [ "type" ]
    },
    "_types:GeoHash" : {
      "type" : "string"
    },
    "_types.query_dsl:IntervalsFuzzy" : {
      "type" : "object",
      "properties" : {
        "analyzer" : {
          "description" : "Analyzer used to normalize the term.",
          "type" : "string"
        },
        "fuzziness" : {
          "$ref" : "#/definitions/_types:Fuzziness"
        },
        "prefix_length" : {
          "description" : "Number of beginning characters left unchanged when creating expansions.",
          "type" : "number"
        },
        "term" : {
          "description" : "The term to match.",
          "type" : "string"
        },
        "transpositions" : {
          "description" : "Indicates whether edits include transpositions of two adjacent characters (for example, `ab` to `ba`).",
          "type" : "boolean"
        },
        "use_field" : {
          "$ref" : "#/definitions/_types:Field"
        }
      },
      "required" : [ "term" ]
    },
    "_types.analysis:PortugueseAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "portuguese" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        },
        "stem_exclusion" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "required" : [ "type" ]
    },
    "_types:Distance" : {
      "type" : "string"
    },
    "_types.query_dsl:RankFeatureFunctionSigmoid" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:RankFeatureFunction"
      }, {
        "type" : "object",
        "properties" : {
          "pivot" : {
            "description" : "Configurable pivot value so that the result will be less than 0.5.",
            "type" : "number"
          },
          "exponent" : {
            "description" : "Configurable Exponent.",
            "type" : "number"
          }
        },
        "required" : [ "pivot", "exponent" ]
      } ]
    },
    "_types.mapping:GeoOrientation" : {
      "type" : "string",
      "enum" : [ "right", "RIGHT", "counterclockwise", "ccw", "left", "LEFT", "clockwise", "cw" ]
    },
    "_types.query_dsl:QueryBase" : {
      "type" : "object",
      "properties" : {
        "boost" : {
          "description" : "Floating point number used to decrease or increase the relevance scores of the query.\nBoost values are relative to the default value of 1.0.\nA boost value between 0 and 1.0 decreases the relevance score.\nA value greater than 1.0 increases the relevance score.",
          "type" : "number"
        },
        "_name" : {
          "type" : "string"
        }
      }
    },
    "_types.query_dsl:SimpleQueryStringFlags" : {
      "description" : "Query flags can be either a single flag or a combination of flags, e.g. `OR|AND|PREFIX`",
      "allOf" : [ {
        "$ref" : "#/definitions/_spec_utils:PipeSeparatedFlagsSimpleQueryStringFlag"
      } ]
    },
    "_types.analysis:StandardAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "standard" ]
        },
        "max_token_length" : {
          "type" : "number"
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        }
      },
      "required" : [ "type" ]
    },
    "_types.query_dsl:ZeroTermsQuery" : {
      "type" : "string",
      "enum" : [ "all", "none" ]
    },
    "_types:GeoDistanceType" : {
      "type" : "string",
      "enum" : [ "arc", "plane" ]
    },
    "_types.analysis:FingerprintAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "fingerprint" ]
        },
        "version" : {
          "$ref" : "#/definitions/_types:VersionString"
        },
        "max_output_size" : {
          "type" : "number"
        },
        "preserve_original" : {
          "type" : "boolean"
        },
        "separator" : {
          "type" : "string"
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        }
      },
      "required" : [ "type", "max_output_size", "preserve_original", "separator" ]
    },
    "_types.analysis:SimpleAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "simple" ]
        },
        "version" : {
          "$ref" : "#/definitions/_types:VersionString"
        }
      },
      "required" : [ "type" ]
    },
    "_types.analysis:BasqueAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "basque" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        },
        "stem_exclusion" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "required" : [ "type" ]
    },
    "_types.analysis:SerbianAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "serbian" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        },
        "stem_exclusion" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "required" : [ "type" ]
    },
    "indices._types:SlowlogTresholdLevels" : {
      "type" : "object",
      "properties" : {
        "warn" : {
          "$ref" : "#/definitions/_types:Duration",
          "default" : "-1"
        },
        "info" : {
          "$ref" : "#/definitions/_types:Duration",
          "default" : "-1"
        },
        "debug" : {
          "$ref" : "#/definitions/_types:Duration",
          "default" : "-1"
        },
        "trace" : {
          "$ref" : "#/definitions/_types:Duration",
          "default" : "-1"
        }
      }
    },
    "_types:IBLambda" : {
      "type" : "string",
      "enum" : [ "df", "ttf" ]
    },
    "_types.analysis:TokenizerDefinition" : {
      "discriminator" : {
        "propertyName" : "type"
      },
      "oneOf" : [ {
        "$ref" : "#/definitions/_types.analysis:CharGroupTokenizer"
      }, {
        "$ref" : "#/definitions/_types.analysis:ClassicTokenizer"
      }, {
        "$ref" : "#/definitions/_types.analysis:EdgeNGramTokenizer"
      }, {
        "$ref" : "#/definitions/_types.analysis:KeywordTokenizer"
      }, {
        "$ref" : "#/definitions/_types.analysis:LetterTokenizer"
      }, {
        "$ref" : "#/definitions/_types.analysis:LowercaseTokenizer"
      }, {
        "$ref" : "#/definitions/_types.analysis:NGramTokenizer"
      }, {
        "$ref" : "#/definitions/_types.analysis:PathHierarchyTokenizer"
      }, {
        "$ref" : "#/definitions/_types.analysis:PatternTokenizer"
      }, {
        "$ref" : "#/definitions/_types.analysis:SimplePatternTokenizer"
      }, {
        "$ref" : "#/definitions/_types.analysis:SimplePatternSplitTokenizer"
      }, {
        "$ref" : "#/definitions/_types.analysis:StandardTokenizer"
      }, {
        "$ref" : "#/definitions/_types.analysis:ThaiTokenizer"
      }, {
        "$ref" : "#/definitions/_types.analysis:UaxEmailUrlTokenizer"
      }, {
        "$ref" : "#/definitions/_types.analysis:WhitespaceTokenizer"
      }, {
        "$ref" : "#/definitions/_types.analysis:IcuTokenizer"
      }, {
        "$ref" : "#/definitions/_types.analysis:KuromojiTokenizer"
      }, {
        "$ref" : "#/definitions/_types.analysis:NoriTokenizer"
      } ],
      "defaultSnippets" : [ {
        "label" : "add new tokenizer",
        "body" : {
          "type" : "$1"
        }
      } ],
      "properties" : {
        "type" : {
          "type" : "string",
          "$ref" : "#/definitions/tokenizer_examples"
        }
      }
    },
    "_types.analysis:ThaiAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "thai" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        }
      },
      "required" : [ "type" ]
    },
    "_types.analysis:TokenFilterDefinition" : {
      "discriminator" : {
        "propertyName" : "type"
      },
      "oneOf" : [ {
        "$ref" : "#/definitions/_types.analysis:AsciiFoldingTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:CommonGramsTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:ConditionTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:DelimitedPayloadTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:EdgeNGramTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:ElisionTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:FingerprintTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:HunspellTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:HyphenationDecompounderTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:KeepTypesTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:KeepWordsTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:KeywordMarkerTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:KStemTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:LengthTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:LimitTokenCountTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:LowercaseTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:MultiplexerTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:NGramTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:NoriPartOfSpeechTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:PatternCaptureTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:PatternReplaceTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:PorterStemTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:PredicateTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:RemoveDuplicatesTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:ReverseTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:ShingleTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:SnowballTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:StemmerOverrideTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:StemmerTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:StopTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:SynonymGraphTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:SynonymTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:TrimTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:TruncateTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:UniqueTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:UppercaseTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:WordDelimiterGraphTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:WordDelimiterTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:KuromojiStemmerTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:KuromojiReadingFormTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:KuromojiPartOfSpeechTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:IcuCollationTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:IcuFoldingTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:IcuNormalizationTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:IcuTransformTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:PhoneticTokenFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:DictionaryDecompounderTokenFilter"
      } ],
      "defaultSnippets" : [ {
        "label" : "add new token filter",
        "body" : {
          "type" : "$1"
        }
      } ]
    },
    "indices._types:IndexRoutingRebalanceOptions" : {
      "type" : "string",
      "enum" : [ "all", "primaries", "replicas", "none" ]
    },
    "_types:ScriptLanguage" : {
      "anyOf" : [ {
        "type" : "string",
        "enum" : [ "painless", "expression", "mustache", "java" ]
      }, {
        "type" : "string"
      } ]
    },
    "_types.analysis:BulgarianAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "bulgarian" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        },
        "stem_exclusion" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "required" : [ "type" ]
    },
    "_types.query_dsl:IntervalsMatch" : {
      "type" : "object",
      "properties" : {
        "analyzer" : {
          "description" : "Analyzer used to analyze terms in the query.",
          "type" : "string"
        },
        "max_gaps" : {
          "description" : "Maximum number of positions between the matching terms.\nTerms further apart than this are not considered matches.",
          "type" : "number"
        },
        "ordered" : {
          "description" : "If `true`, matching terms must appear in their specified order.",
          "type" : "boolean"
        },
        "query" : {
          "description" : "Text you wish to find in the provided field.",
          "type" : "string"
        },
        "use_field" : {
          "$ref" : "#/definitions/_types:Field"
        },
        "filter" : {
          "$ref" : "#/definitions/_types.query_dsl:IntervalsFilter"
        }
      },
      "required" : [ "query" ]
    },
    "_types.query_dsl:PinnedDoc" : {
      "type" : "object",
      "properties" : {
        "_id" : {
          "$ref" : "#/definitions/_types:Id"
        },
        "_index" : {
          "$ref" : "#/definitions/_types:IndexName"
        }
      },
      "required" : [ "_id", "_index" ]
    },
    "_types:ulong" : {
      "type" : "number"
    },
    "_types.analysis:WhitespaceAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "whitespace" ]
        },
        "version" : {
          "$ref" : "#/definitions/_types:VersionString"
        }
      },
      "required" : [ "type" ]
    },
    "_types.query_dsl:IntervalsAllOf" : {
      "type" : "object",
      "properties" : {
        "intervals" : {
          "description" : "An array of rules to combine. All rules must produce a match in a document for the overall source to match.",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/_types.query_dsl:IntervalsContainer"
          }
        },
        "max_gaps" : {
          "description" : "Maximum number of positions between the matching terms.\nIntervals produced by the rules further apart than this are not considered matches.",
          "type" : "number"
        },
        "ordered" : {
          "description" : "If `true`, intervals produced by the rules should appear in the order in which they are specified.",
          "type" : "boolean"
        },
        "filter" : {
          "$ref" : "#/definitions/_types.query_dsl:IntervalsFilter"
        }
      },
      "required" : [ "intervals" ]
    },
    "_types.query_dsl:CombinedFieldsZeroTerms" : {
      "type" : "string",
      "enum" : [ "none", "all" ]
    },
    "_types:FieldValue" : {
      "description" : "A field value.",
      "oneOf" : [ {
        "type" : "number"
      }, {
        "type" : "number"
      }, {
        "type" : "string"
      }, {
        "type" : "boolean"
      }, {
        "nullable" : true,
        "type" : "string"
      }, {
        "type" : "object"
      } ]
    },
    "_types:TimeZone" : {
      "type" : "string"
    },
    "_types.query_dsl:Operator" : {
      "type" : "string",
      "enum" : [ "and", "AND", "or", "OR" ]
    },
    "_types.query_dsl:TextQueryType" : {
      "type" : "string",
      "enum" : [ "best_fields", "most_fields", "cross_fields", "phrase", "phrase_prefix", "bool_prefix" ]
    },
    "_types:Normalization" : {
      "type" : "string",
      "enum" : [ "no", "h1", "h2", "h3", "z" ]
    },
    "_types.analysis:CatalanAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "catalan" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        },
        "stem_exclusion" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "required" : [ "type" ]
    },
    "_types:IBDistribution" : {
      "type" : "string",
      "enum" : [ "ll", "spl" ]
    },
    "indices._types:DownsampleConfig" : {
      "type" : "object",
      "properties" : {
        "fixed_interval" : {
          "$ref" : "#/definitions/_types:DurationLarge"
        }
      },
      "required" : [ "fixed_interval" ]
    },
    "_types.analysis:IcuAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "icu_analyzer" ]
        },
        "method" : {
          "$ref" : "#/definitions/_types.analysis:IcuNormalizationType"
        },
        "mode" : {
          "$ref" : "#/definitions/_types.analysis:IcuNormalizationMode"
        }
      },
      "required" : [ "type", "method", "mode" ]
    },
    "_types.analysis:FrenchAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "french" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        },
        "stem_exclusion" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "required" : [ "type" ]
    },
    "_types:byte" : {
      "type" : "number"
    },
    "_types.analysis:ArmenianAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "armenian" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        },
        "stem_exclusion" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "required" : [ "type" ]
    },
    "indices._types:IndexRoutingAllocationInclude" : {
      "type" : "object",
      "properties" : {
        "_tier_preference" : {
          "type" : "string"
        },
        "_id" : {
          "$ref" : "#/definitions/_types:Id"
        }
      }
    },
    "_types.analysis:IcuCollationDecomposition" : {
      "type" : "string",
      "enum" : [ "no", "identical" ]
    },
    "_types.analysis:PatternAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "pattern" ]
        },
        "version" : {
          "$ref" : "#/definitions/_types:VersionString"
        },
        "flags" : {
          "type" : "string"
        },
        "lowercase" : {
          "type" : "boolean"
        },
        "pattern" : {
          "type" : "string"
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        }
      },
      "required" : [ "type", "pattern" ]
    },
    "_types.query_dsl:RankFeatureFunctionLogarithm" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:RankFeatureFunction"
      }, {
        "type" : "object",
        "properties" : {
          "scaling_factor" : {
            "description" : "Configurable scaling factor.",
            "type" : "number"
          }
        },
        "required" : [ "scaling_factor" ]
      } ]
    },
    "_types.analysis:EnglishAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "english" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        },
        "stem_exclusion" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "required" : [ "type" ]
    },
    "_types.analysis:GreekAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "greek" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        }
      },
      "required" : [ "type" ]
    },
    "_types.mapping:DenseVectorSimilarity" : {
      "type" : "string",
      "enum" : [ "cosine", "dot_product", "l2_norm", "max_inner_product" ]
    },
    "indices._types:SlowlogTresholds" : {
      "type" : "object",
      "properties" : {
        "query" : {
          "$ref" : "#/definitions/indices._types:SlowlogTresholdLevels"
        },
        "fetch" : {
          "$ref" : "#/definitions/indices._types:SlowlogTresholdLevels"
        }
      }
    },
    "_types:short" : {
      "type" : "number"
    },
    "_types.analysis:LatvianAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "latvian" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        },
        "stem_exclusion" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "required" : [ "type" ]
    },
    "_types.analysis:CharFilterDefinition" : {
      "discriminator" : {
        "propertyName" : "type"
      },
      "oneOf" : [ {
        "$ref" : "#/definitions/_types.analysis:HtmlStripCharFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:MappingCharFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:PatternReplaceCharFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:IcuNormalizationCharFilter"
      }, {
        "$ref" : "#/definitions/_types.analysis:KuromojiIterationMarkCharFilter"
      } ],
      "properties" : {
        "type" : {
          "type" : "string",
          "examples" : [ "html_strip", "mapping", "pattern_replace", "icu_normalizer", "kuromoji_iteration_mark" ]
        }
      }
    },
    "_types.analysis:IcuCollationAlternate" : {
      "type" : "string",
      "enum" : [ "shifted", "non-ignorable" ]
    },
    "_types:DFRBasicModel" : {
      "type" : "string",
      "enum" : [ "be", "d", "g", "if", "in", "ine", "p" ]
    },
    "_types.query_dsl:FunctionScoreMode" : {
      "type" : "string",
      "enum" : [ "multiply", "sum", "avg", "first", "max", "min" ]
    },
    "_types.mapping:PropertyBase" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "description" : "Metadata about the field.",
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "properties" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/_types.mapping:Property"
          },
          "defaultSnippets" : [ {
            "label" : "add new property",
            "body" : {
              "${1:property1}" : {
                "type" : "$2"
              }
            }
          } ]
        },
        "ignore_above" : {
          "type" : "number",
          "examples" : [ 4096 ]
        },
        "dynamic" : {
          "$ref" : "#/definitions/_types.mapping:DynamicMapping"
        },
        "fields" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/_types.mapping:Property"
          },
          "defaultSnippets" : [ {
            "label" : "add new field",
            "body" : {
              "${1:field1}" : {
                "type" : "$2"
              }
            }
          } ]
        },
        "synthetic_source_keep" : {
          "$ref" : "#/definitions/_types.mapping:SyntheticSourceKeepEnum",
          "description" : "Since Elasticsearch 8.16"
        }
      }
    },
    "_types.query_dsl:UntypedRangeQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:RangeQueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "format" : {
            "$ref" : "#/definitions/_types:DateFormat"
          },
          "time_zone" : {
            "$ref" : "#/definitions/_types:TimeZone"
          }
        }
      } ]
    },
    "indices._types:IndexRoutingAllocationInitialRecovery" : {
      "type" : "object",
      "properties" : {
        "_id" : {
          "$ref" : "#/definitions/_types:Id"
        }
      }
    },
    "_types.query_dsl:SpanQuery" : {
      "type" : "object",
      "properties" : {
        "span_containing" : {
          "$ref" : "#/definitions/_types.query_dsl:SpanContainingQuery"
        },
        "span_field_masking" : {
          "$ref" : "#/definitions/_types.query_dsl:SpanFieldMaskingQuery"
        },
        "span_first" : {
          "$ref" : "#/definitions/_types.query_dsl:SpanFirstQuery"
        },
        "span_gap" : {
          "$ref" : "#/definitions/_types.query_dsl:SpanGapQuery"
        },
        "span_multi" : {
          "$ref" : "#/definitions/_types.query_dsl:SpanMultiTermQuery"
        },
        "span_near" : {
          "$ref" : "#/definitions/_types.query_dsl:SpanNearQuery"
        },
        "span_not" : {
          "$ref" : "#/definitions/_types.query_dsl:SpanNotQuery"
        },
        "span_or" : {
          "$ref" : "#/definitions/_types.query_dsl:SpanOrQuery"
        },
        "span_term" : {
          "description" : "The equivalent of the `term` query but for use with other span queries.",
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/_types.query_dsl:SpanTermQuery"
          },
          "minProperties" : 1,
          "maxProperties" : 1
        },
        "span_within" : {
          "$ref" : "#/definitions/_types.query_dsl:SpanWithinQuery"
        }
      },
      "minProperties" : 1,
      "maxProperties" : 1
    },
    "_types.analysis:RomanianAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "romanian" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        },
        "stem_exclusion" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "required" : [ "type" ]
    },
    "_types:GeoTile" : {
      "description" : "A map tile reference, represented as `{zoom}/{x}/{y}`",
      "type" : "string"
    },
    "_types.analysis:CustomAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "custom" ]
        },
        "char_filter" : {
          "oneOf" : [ {
            "type" : "string"
          }, {
            "type" : "array",
            "items" : {
              "type" : "string",
              "examples" : [ "html_strip" ]
            }
          } ],
          "default" : [ ]
        },
        "filter" : {
          "oneOf" : [ {
            "type" : "string"
          }, {
            "type" : "array",
            "items" : {
              "type" : "string",
              "$ref" : "#/definitions/filter_examples"
            }
          } ],
          "default" : [ ]
        },
        "position_increment_gap" : {
          "type" : "number",
          "default" : 100
        },
        "position_offset_gap" : {
          "type" : "number",
          "default" : 100
        },
        "tokenizer" : {
          "type" : "string",
          "$ref" : "#/definitions/tokenizer_examples"
        }
      },
      "required" : [ "type", "tokenizer" ]
    },
    "_types:Fuzziness" : {
      "oneOf" : [ {
        "type" : "string"
      }, {
        "type" : "number"
      } ]
    },
    "_types.mapping:GeoStrategy" : {
      "type" : "string",
      "enum" : [ "recursive", "term" ]
    },
    "indices._types:IndexRoutingAllocationDisk" : {
      "type" : "object",
      "properties" : {
        "threshold_enabled" : {
          "oneOf" : [ {
            "type" : "boolean"
          }, {
            "type" : "string"
          } ]
        }
      }
    },
    "_types.query_dsl:Like" : {
      "description" : "Text that we want similar documents for or a lookup to a document's field for the text.",
      "oneOf" : [ {
        "type" : "string"
      }, {
        "$ref" : "#/definitions/_types.query_dsl:LikeDocument"
      } ]
    },
    "_types.mapping:TextIndexPrefixes" : {
      "type" : "object",
      "properties" : {
        "max_chars" : {
          "type" : "number"
        },
        "min_chars" : {
          "type" : "number"
        }
      },
      "required" : [ "max_chars", "min_chars" ]
    },
    "_types.query_dsl:ChildScoreMode" : {
      "type" : "string",
      "enum" : [ "none", "avg", "sum", "max", "min" ]
    },
    "_types.analysis:NoriAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "nori" ]
        },
        "version" : {
          "$ref" : "#/definitions/_types:VersionString"
        },
        "decompound_mode" : {
          "$ref" : "#/definitions/_types.analysis:NoriDecompoundMode"
        },
        "stoptags" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "user_dictionary" : {
          "type" : "string"
        }
      },
      "required" : [ "type" ]
    },
    "_types.mapping:RangePropertyBase" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.mapping:DocValuesPropertyBase"
      }, {
        "type" : "object",
        "properties" : {
          "boost" : {
            "type" : "number"
          },
          "coerce" : {
            "type" : "boolean"
          },
          "index" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "_types.mapping:DenseVectorElementType" : {
      "type" : "string",
      "enum" : [ "bit", "byte", "float" ]
    },
    "_types.query_dsl:IntervalsWildcard" : {
      "type" : "object",
      "properties" : {
        "analyzer" : {
          "description" : "Analyzer used to analyze the `pattern`.\nDefaults to the top-level field's analyzer.",
          "type" : "string"
        },
        "pattern" : {
          "description" : "Wildcard pattern used to find matching terms.",
          "type" : "string"
        },
        "use_field" : {
          "$ref" : "#/definitions/_types:Field"
        }
      },
      "required" : [ "pattern" ]
    },
    "_types:GeoHexCell" : {
      "description" : "A map hex cell (H3) reference",
      "type" : "string"
    },
    "_types.query_dsl:FunctionBoostMode" : {
      "type" : "string",
      "enum" : [ "multiply", "replace", "sum", "avg", "max", "min" ]
    },
    "_types:Ids" : {
      "oneOf" : [ {
        "$ref" : "#/definitions/_types:Id"
      }, {
        "type" : "array",
        "items" : {
          "$ref" : "#/definitions/_types:Id"
        }
      } ]
    },
    "_types.query_dsl:GeoExecution" : {
      "type" : "string",
      "enum" : [ "memory", "indexed" ]
    },
    "indices._types:FielddataFrequencyFilter" : {
      "type" : "object",
      "properties" : {
        "max" : {
          "type" : "number"
        },
        "min" : {
          "type" : "number"
        },
        "min_segment_size" : {
          "type" : "number"
        }
      },
      "required" : [ "max", "min", "min_segment_size" ]
    },
    "_types.analysis:DutchAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "dutch" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        },
        "stem_exclusion" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "required" : [ "type" ]
    },
    "_types.query_dsl:IntervalsPrefix" : {
      "type" : "object",
      "properties" : {
        "analyzer" : {
          "description" : "Analyzer used to analyze the `prefix`.",
          "type" : "string"
        },
        "prefix" : {
          "description" : "Beginning characters of terms you wish to find in the top-level field.",
          "type" : "string"
        },
        "use_field" : {
          "$ref" : "#/definitions/_types:Field"
        }
      },
      "required" : [ "prefix" ]
    },
    "_types.mapping:TimeSeriesMetricType" : {
      "type" : "string",
      "enum" : [ "gauge", "counter", "summary", "histogram", "position" ]
    },
    "_types:RelationName" : {
      "type" : "string"
    },
    "_types.analysis:LithuanianAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "lithuanian" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        },
        "stem_exclusion" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "required" : [ "type" ]
    },
    "_types.analysis:SnowballAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "snowball" ]
        },
        "version" : {
          "$ref" : "#/definitions/_types:VersionString"
        },
        "language" : {
          "$ref" : "#/definitions/_types.analysis:SnowballLanguage"
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        }
      },
      "required" : [ "type", "language" ]
    },
    "_types.analysis:FinnishAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "finnish" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        },
        "stem_exclusion" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "required" : [ "type" ]
    },
    "_types.query_dsl:GeoValidationMethod" : {
      "type" : "string",
      "enum" : [ "coerce", "ignore_malformed", "strict" ]
    },
    "_types.query_dsl:RankFeatureFunctionLinear" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:RankFeatureFunction"
      }, {
        "type" : "object"
      } ]
    },
    "_types.analysis:HungarianAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "hungarian" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        },
        "stem_exclusion" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "required" : [ "type" ]
    },
    "_types.analysis:SwedishAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "swedish" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        },
        "stem_exclusion" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "required" : [ "type" ]
    },
    "_types.query_dsl:UntypedDistanceFeatureQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:DistanceFeatureQueryBase"
      }, {
        "type" : "object"
      } ]
    },
    "_types:DFIIndependenceMeasure" : {
      "type" : "string",
      "enum" : [ "standardized", "saturated", "chisquared" ]
    },
    "_types.analysis:KeywordAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "keyword" ]
        },
        "version" : {
          "$ref" : "#/definitions/_types:VersionString"
        }
      },
      "required" : [ "type" ]
    },
    "indices._types:SourceMode" : {
      "type" : "string",
      "enum" : [ "disabled", "stored", "synthetic" ]
    },
    "_types:DFRAfterEffect" : {
      "type" : "string",
      "enum" : [ "no", "b", "l" ]
    },
    "_types.mapping:OnScriptError" : {
      "type" : "string",
      "enum" : [ "fail", "continue" ]
    },
    "_types.analysis:StopAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "stop" ]
        },
        "version" : {
          "$ref" : "#/definitions/_types:VersionString"
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        }
      },
      "required" : [ "type" ]
    },
    "_types.analysis:SoraniAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "sorani" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        },
        "stem_exclusion" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "required" : [ "type" ]
    },
    "_types:QueryVectorBuilder" : {
      "type" : "object",
      "properties" : {
        "text_embedding" : {
          "$ref" : "#/definitions/_types:TextEmbedding"
        }
      },
      "minProperties" : 1,
      "maxProperties" : 1
    },
    "_types.analysis:IndonesianAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "indonesian" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        },
        "stem_exclusion" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "required" : [ "type" ]
    },
    "_types.analysis:GalicianAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "galician" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        },
        "stem_exclusion" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "required" : [ "type" ]
    },
    "_types.analysis:PersianAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "persian" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        }
      },
      "required" : [ "type" ]
    },
    "indices._types:NumericFielddata" : {
      "type" : "object",
      "properties" : {
        "format" : {
          "$ref" : "#/definitions/indices._types:NumericFielddataFormat"
        }
      },
      "required" : [ "format" ]
    },
    "_types:GeoLocation" : {
      "description" : "A latitude/longitude as a 2 dimensional point. It can be represented in various ways:\n- as a `{lat, long}` object\n- as a geo hash value\n- as a `[lon, lat]` array\n- as a string in `\"<lat>, <lon>\"` or WKT point formats",
      "oneOf" : [ {
        "$ref" : "#/definitions/_types:LatLonGeoLocation"
      }, {
        "$ref" : "#/definitions/_types:GeoHashLocation"
      }, {
        "type" : "array",
        "items" : {
          "type" : "number"
        }
      }, {
        "type" : "string"
      } ]
    },
    "_types.analysis:ArabicAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "arabic" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        },
        "stem_exclusion" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "required" : [ "type" ]
    },
    "_types.analysis:LowercaseNormalizer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "lowercase" ]
        }
      },
      "required" : [ "type" ]
    },
    "_types.query_dsl:DateRangeQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:RangeQueryBaseDateMath"
      }, {
        "type" : "object",
        "properties" : {
          "format" : {
            "$ref" : "#/definitions/_types:DateFormat"
          },
          "time_zone" : {
            "$ref" : "#/definitions/_types:TimeZone"
          }
        }
      } ]
    },
    "_types.analysis:ChineseAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "chinese" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        }
      },
      "required" : [ "type" ]
    },
    "_types.query_dsl:IntervalsAnyOf" : {
      "type" : "object",
      "properties" : {
        "intervals" : {
          "description" : "An array of rules to match.",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/_types.query_dsl:IntervalsContainer"
          }
        },
        "filter" : {
          "$ref" : "#/definitions/_types.query_dsl:IntervalsFilter"
        }
      },
      "required" : [ "intervals" ]
    },
    "_global.search._types:InnerHits" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "$ref" : "#/definitions/_types:Name"
        },
        "size" : {
          "description" : "The maximum number of hits to return per `inner_hits`.",
          "type" : "number"
        },
        "from" : {
          "description" : "Inner hit starting document offset.",
          "type" : "number"
        },
        "collapse" : {
          "$ref" : "#/definitions/_global.search._types:FieldCollapse"
        },
        "docvalue_fields" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/_types.query_dsl:FieldAndFormat"
          }
        },
        "explain" : {
          "type" : "boolean"
        },
        "highlight" : {
          "$ref" : "#/definitions/_global.search._types:Highlight"
        },
        "ignore_unmapped" : {
          "type" : "boolean"
        },
        "script_fields" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/_types:ScriptField"
          }
        },
        "seq_no_primary_term" : {
          "type" : "boolean"
        },
        "fields" : {
          "$ref" : "#/definitions/_types:Fields"
        },
        "sort" : {
          "$ref" : "#/definitions/_types:Sort"
        },
        "_source" : {
          "$ref" : "#/definitions/_global.search._types:SourceConfig"
        },
        "stored_fields" : {
          "$ref" : "#/definitions/_types:Fields"
        },
        "track_scores" : {
          "type" : "boolean"
        },
        "version" : {
          "type" : "boolean"
        }
      }
    },
    "_types.query_dsl:FunctionScoreContainer" : {
      "allOf" : [ {
        "type" : "object",
        "properties" : {
          "filter" : {
            "$ref" : "#/definitions/_types.query_dsl:QueryContainer"
          },
          "weight" : {
            "type" : "number"
          }
        }
      }, {
        "type" : "object",
        "properties" : {
          "exp" : {
            "$ref" : "#/definitions/_types.query_dsl:DecayFunction"
          },
          "gauss" : {
            "$ref" : "#/definitions/_types.query_dsl:DecayFunction"
          },
          "linear" : {
            "$ref" : "#/definitions/_types.query_dsl:DecayFunction"
          },
          "field_value_factor" : {
            "$ref" : "#/definitions/_types.query_dsl:FieldValueFactorScoreFunction"
          },
          "random_score" : {
            "$ref" : "#/definitions/_types.query_dsl:RandomScoreFunction"
          },
          "script_score" : {
            "$ref" : "#/definitions/_types.query_dsl:ScriptScoreFunction"
          }
        },
        "minProperties" : 1,
        "maxProperties" : 1
      } ]
    },
    "_types.analysis:EstonianAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "estonian" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        }
      },
      "required" : [ "type" ]
    },
    "_types.analysis:BrazilianAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "brazilian" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        }
      },
      "required" : [ "type" ]
    },
    "_types.query_dsl:NumberRangeQuery" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:RangeQueryBasedouble"
      }, {
        "type" : "object"
      } ]
    },
    "_types.analysis:KuromojiAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "kuromoji" ]
        },
        "mode" : {
          "$ref" : "#/definitions/_types.analysis:KuromojiTokenizationMode"
        },
        "user_dictionary" : {
          "type" : "string"
        }
      },
      "required" : [ "type", "mode" ]
    },
    "_types.analysis:IrishAnalyzer" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "irish" ]
        },
        "stopwords" : {
          "$ref" : "#/definitions/_types.analysis:StopWords"
        },
        "stopwords_path" : {
          "type" : "string"
        },
        "stem_exclusion" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "required" : [ "type" ]
    },
    "_types.analysis:IcuNormalizationMode" : {
      "type" : "string",
      "enum" : [ "decompose", "compose" ]
    },
    "_types.analysis:PatternTokenizer" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenizerBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "pattern" ]
          },
          "flags" : {
            "type" : "string"
          },
          "group" : {
            "type" : "number"
          },
          "pattern" : {
            "type" : "string"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.query_dsl:FieldAndFormat" : {
      "type" : "object",
      "properties" : {
        "field" : {
          "$ref" : "#/definitions/_types:Field"
        },
        "format" : {
          "description" : "The format in which the values are returned.",
          "type" : "string"
        },
        "include_unmapped" : {
          "type" : "boolean"
        }
      },
      "required" : [ "field" ]
    },
    "_types.analysis:LetterTokenizer" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenizerBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "letter" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types:ScriptField" : {
      "type" : "object",
      "properties" : {
        "script" : {
          "$ref" : "#/definitions/_types:Script"
        },
        "ignore_failure" : {
          "type" : "boolean"
        }
      },
      "required" : [ "script" ]
    },
    "_global.search._types:Highlight" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_global.search._types:HighlightBase"
      }, {
        "type" : "object",
        "properties" : {
          "encoder" : {
            "$ref" : "#/definitions/_global.search._types:HighlighterEncoder"
          },
          "fields" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/definitions/_global.search._types:HighlightField"
            }
          }
        },
        "required" : [ "fields" ]
      } ]
    },
    "_types.query_dsl:ScriptScoreFunction" : {
      "type" : "object",
      "properties" : {
        "script" : {
          "$ref" : "#/definitions/_types:Script"
        }
      },
      "required" : [ "script" ]
    },
    "_types.analysis:SimplePatternSplitTokenizer" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenizerBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "simple_pattern_split" ]
          },
          "pattern" : {
            "type" : "string"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:StandardTokenizer" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenizerBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "standard" ]
          },
          "max_token_length" : {
            "type" : "number"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:PatternReplaceCharFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:CharFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "pattern_replace" ]
          },
          "flags" : {
            "type" : "string",
            "examples" : [ "CASE_INSENSITIVE|COMMENTS" ]
          },
          "pattern" : {
            "type" : "string",
            "examples" : [ "[0-9]" ]
          },
          "replacement" : {
            "type" : "string",
            "examples" : [ "-$1-" ]
          }
        },
        "required" : [ "type", "pattern" ]
      } ]
    },
    "_types.query_dsl:RangeQueryBase" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "relation" : {
            "$ref" : "#/definitions/_types.query_dsl:RangeRelation"
          },
          "gt" : {
            "description" : "Greater than.",
            "type" : "object"
          },
          "gte" : {
            "description" : "Greater than or equal to.",
            "type" : "object"
          },
          "lt" : {
            "description" : "Less than.",
            "type" : "object"
          },
          "lte" : {
            "description" : "Less than or equal to.",
            "type" : "object"
          },
          "from" : {
            "deprecated" : true,
            "oneOf" : [ {
              "type" : "object"
            }, {
              "nullable" : true,
              "type" : "string"
            } ]
          },
          "to" : {
            "deprecated" : true,
            "oneOf" : [ {
              "type" : "object"
            }, {
              "nullable" : true,
              "type" : "string"
            } ]
          }
        }
      } ]
    },
    "_types.analysis:WordDelimiterTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "word_delimiter" ]
          },
          "catenate_all" : {
            "type" : "boolean"
          },
          "catenate_numbers" : {
            "type" : "boolean"
          },
          "catenate_words" : {
            "type" : "boolean"
          },
          "generate_number_parts" : {
            "type" : "boolean"
          },
          "generate_word_parts" : {
            "type" : "boolean"
          },
          "preserve_original" : {
            "$ref" : "#/definitions/_spec_utils:Stringifiedboolean"
          },
          "protected_words" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "protected_words_path" : {
            "type" : "string"
          },
          "split_on_case_change" : {
            "type" : "boolean"
          },
          "split_on_numerics" : {
            "type" : "boolean"
          },
          "stem_english_possessive" : {
            "type" : "boolean"
          },
          "type_table" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "type_table_path" : {
            "type" : "string"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:KuromojiStemmerTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "kuromoji_stemmer" ]
          },
          "minimum_length" : {
            "type" : "number"
          }
        },
        "required" : [ "type", "minimum_length" ]
      } ]
    },
    "_types.analysis:TruncateTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "truncate" ]
          },
          "length" : {
            "type" : "number"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:IcuCollationTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "icu_collation" ]
          },
          "alternate" : {
            "$ref" : "#/definitions/_types.analysis:IcuCollationAlternate"
          },
          "case_first" : {
            "$ref" : "#/definitions/_types.analysis:IcuCollationCaseFirst"
          },
          "case_level" : {
            "type" : "boolean"
          },
          "country" : {
            "type" : "string"
          },
          "decomposition" : {
            "$ref" : "#/definitions/_types.analysis:IcuCollationDecomposition"
          },
          "hiragana_quaternary_mode" : {
            "type" : "boolean"
          },
          "language" : {
            "type" : "string"
          },
          "numeric" : {
            "type" : "boolean"
          },
          "rules" : {
            "type" : "string"
          },
          "strength" : {
            "$ref" : "#/definitions/_types.analysis:IcuCollationStrength"
          },
          "variable_top" : {
            "type" : "string"
          },
          "variant" : {
            "type" : "string"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:StemmerTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "stemmer" ]
          },
          "language" : {
            "type" : "string"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:IcuTokenizer" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenizerBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "icu_tokenizer" ]
          },
          "rule_files" : {
            "type" : "string"
          }
        },
        "required" : [ "type", "rule_files" ]
      } ]
    },
    "_types:DateFormat" : {
      "type" : "string"
    },
    "_types.analysis:PredicateTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "predicate_token_filter" ]
          },
          "script" : {
            "$ref" : "#/definitions/_types:Script"
          }
        },
        "required" : [ "type", "script" ]
      } ]
    },
    "_types.analysis:NGramTokenizer" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenizerBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "ngram" ]
          },
          "custom_token_chars" : {
            "type" : "string"
          },
          "max_gram" : {
            "type" : "number"
          },
          "min_gram" : {
            "type" : "number"
          },
          "token_chars" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/_types.analysis:TokenChar"
            }
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types:GeoHashLocation" : {
      "type" : "object",
      "properties" : {
        "geohash" : {
          "$ref" : "#/definitions/_types:GeoHash"
        }
      },
      "required" : [ "geohash" ]
    },
    "_types.analysis:KuromojiTokenizationMode" : {
      "type" : "string",
      "enum" : [ "normal", "search", "extended" ]
    },
    "_types.analysis:NoriTokenizer" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenizerBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "nori_tokenizer" ]
          },
          "decompound_mode" : {
            "$ref" : "#/definitions/_types.analysis:NoriDecompoundMode"
          },
          "discard_punctuation" : {
            "type" : "boolean"
          },
          "user_dictionary" : {
            "type" : "string"
          },
          "user_dictionary_rules" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_global.search._types:SourceConfig" : {
      "description" : "Defines how to fetch a source. Fetching can be disabled entirely, or the source can be filtered.",
      "oneOf" : [ {
        "type" : "boolean"
      }, {
        "$ref" : "#/definitions/_global.search._types:SourceFilter"
      } ]
    },
    "_types.mapping:DenseVectorIndexOptionsType" : {
      "type" : "string",
      "enum" : [ "flat", "hnsw", "int4_flat", "int4_hnsw", "int8_flat", "int8_hnsw" ]
    },
    "_types.analysis:PhoneticTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "phonetic" ]
          },
          "encoder" : {
            "$ref" : "#/definitions/_types.analysis:PhoneticEncoder"
          },
          "languageset" : {
            "oneOf" : [ {
              "$ref" : "#/definitions/_types.analysis:PhoneticLanguage"
            }, {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/_types.analysis:PhoneticLanguage"
              }
            } ]
          },
          "max_code_len" : {
            "type" : "number"
          },
          "name_type" : {
            "$ref" : "#/definitions/_types.analysis:PhoneticNameType"
          },
          "replace" : {
            "type" : "boolean"
          },
          "rule_type" : {
            "$ref" : "#/definitions/_types.analysis:PhoneticRuleType"
          }
        },
        "required" : [ "type", "encoder" ]
      } ]
    },
    "_types:DurationLarge" : {
      "description" : "A date histogram interval. Similar to `Duration` with additional units: `w` (week), `M` (month), `q` (quarter) and\n`y` (year)",
      "type" : "string"
    },
    "_types.analysis:AsciiFoldingTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "asciifolding" ]
          },
          "preserve_original" : {
            "$ref" : "#/definitions/_spec_utils:Stringifiedboolean"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.query_dsl:IntervalsContainer" : {
      "type" : "object",
      "properties" : {
        "all_of" : {
          "$ref" : "#/definitions/_types.query_dsl:IntervalsAllOf"
        },
        "any_of" : {
          "$ref" : "#/definitions/_types.query_dsl:IntervalsAnyOf"
        },
        "fuzzy" : {
          "$ref" : "#/definitions/_types.query_dsl:IntervalsFuzzy"
        },
        "match" : {
          "$ref" : "#/definitions/_types.query_dsl:IntervalsMatch"
        },
        "prefix" : {
          "$ref" : "#/definitions/_types.query_dsl:IntervalsPrefix"
        },
        "wildcard" : {
          "$ref" : "#/definitions/_types.query_dsl:IntervalsWildcard"
        }
      },
      "minProperties" : 1,
      "maxProperties" : 1
    },
    "_spec_utils:PipeSeparatedFlagsSimpleQueryStringFlag" : {
      "description" : "A set of flags that can be represented as a single enum value or a set of values that are encoded\nas a pipe-separated string\n\nDepending on the target language, code generators can use this hint to generate language specific\nflags enum constructs and the corresponding (de-)serialization code.",
      "oneOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:SimpleQueryStringFlag"
      }, {
        "type" : "string"
      } ]
    },
    "_types.analysis:ShingleTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "shingle" ]
          },
          "filler_token" : {
            "type" : "string"
          },
          "max_shingle_size" : {
            "oneOf" : [ {
              "type" : "number"
            }, {
              "type" : "string"
            } ]
          },
          "min_shingle_size" : {
            "oneOf" : [ {
              "type" : "number"
            }, {
              "type" : "string"
            } ]
          },
          "output_unigrams" : {
            "type" : "boolean"
          },
          "output_unigrams_if_no_shingles" : {
            "type" : "boolean"
          },
          "token_separator" : {
            "type" : "string"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.query_dsl:LikeDocument" : {
      "type" : "object",
      "properties" : {
        "doc" : {
          "description" : "A document not present in the index.",
          "type" : "object"
        },
        "fields" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/_types:Field"
          }
        },
        "_id" : {
          "$ref" : "#/definitions/_types:Id"
        },
        "_index" : {
          "$ref" : "#/definitions/_types:IndexName"
        },
        "per_field_analyzer" : {
          "description" : "Overrides the default analyzer.",
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "routing" : {
          "$ref" : "#/definitions/_types:Routing"
        },
        "version" : {
          "$ref" : "#/definitions/_types:VersionNumber"
        },
        "version_type" : {
          "$ref" : "#/definitions/_types:VersionType"
        }
      }
    },
    "_types.analysis:HyphenationDecompounderTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:CompoundWordTokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "hyphenation_decompounder" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:UppercaseTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "uppercase" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.query_dsl:RangeQueryBasedouble" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "relation" : {
            "$ref" : "#/definitions/_types.query_dsl:RangeRelation"
          },
          "gt" : {
            "description" : "Greater than.",
            "type" : "number"
          },
          "gte" : {
            "description" : "Greater than or equal to.",
            "type" : "number"
          },
          "lt" : {
            "description" : "Less than.",
            "type" : "number"
          },
          "lte" : {
            "description" : "Less than or equal to.",
            "type" : "number"
          },
          "from" : {
            "deprecated" : true,
            "oneOf" : [ {
              "type" : "number"
            }, {
              "nullable" : true,
              "type" : "string"
            } ]
          },
          "to" : {
            "deprecated" : true,
            "oneOf" : [ {
              "type" : "number"
            }, {
              "nullable" : true,
              "type" : "string"
            } ]
          }
        }
      } ]
    },
    "_types.analysis:MappingCharFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:CharFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "mapping" ]
          },
          "mappings" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "defaultSnippets" : [ {
              "body" : [ "${1::) => _happy_}" ]
            } ]
          },
          "mappings_path" : {
            "type" : "string"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:StemmerOverrideTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "stemmer_override" ]
          },
          "rules" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "rules_path" : {
            "type" : "string"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:SnowballTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "snowball" ]
          },
          "language" : {
            "$ref" : "#/definitions/_types.analysis:SnowballLanguage"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:ThaiTokenizer" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenizerBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "thai" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:ConditionTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "condition" ]
          },
          "filter" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "script" : {
            "$ref" : "#/definitions/_types:Script"
          }
        },
        "required" : [ "type", "filter", "script" ]
      } ]
    },
    "_types.query_dsl:FieldValueFactorScoreFunction" : {
      "type" : "object",
      "properties" : {
        "field" : {
          "$ref" : "#/definitions/_types:Field"
        },
        "factor" : {
          "description" : "Optional factor to multiply the field value with.",
          "type" : "number"
        },
        "missing" : {
          "description" : "Value used if the document doesn’t have that field.\nThe modifier and factor are still applied to it as though it were read from the document.",
          "type" : "number"
        },
        "modifier" : {
          "$ref" : "#/definitions/_types.query_dsl:FieldValueFactorModifier"
        }
      },
      "required" : [ "field" ]
    },
    "_types.analysis:LowercaseTokenizer" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenizerBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "lowercase" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:SimplePatternTokenizer" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenizerBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "simple_pattern" ]
          },
          "pattern" : {
            "type" : "string"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:UniqueTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "unique" ]
          },
          "only_on_same_position" : {
            "type" : "boolean"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:IcuNormalizationTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "icu_normalizer" ]
          },
          "name" : {
            "$ref" : "#/definitions/_types.analysis:IcuNormalizationType"
          }
        },
        "required" : [ "type", "name" ]
      } ]
    },
    "_types.analysis:KuromojiIterationMarkCharFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:CharFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "kuromoji_iteration_mark" ]
          },
          "normalize_kana" : {
            "type" : "boolean"
          },
          "normalize_kanji" : {
            "type" : "boolean"
          }
        },
        "required" : [ "type", "normalize_kana", "normalize_kanji" ]
      } ]
    },
    "_types.query_dsl:RangeQueryBaseDateMath" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "relation" : {
            "$ref" : "#/definitions/_types.query_dsl:RangeRelation"
          },
          "gt" : {
            "$ref" : "#/definitions/_types:DateMath"
          },
          "gte" : {
            "$ref" : "#/definitions/_types:DateMath"
          },
          "lt" : {
            "$ref" : "#/definitions/_types:DateMath"
          },
          "lte" : {
            "$ref" : "#/definitions/_types:DateMath"
          },
          "from" : {
            "deprecated" : true,
            "oneOf" : [ {
              "$ref" : "#/definitions/_types:DateMath"
            }, {
              "nullable" : true,
              "type" : "string"
            } ]
          },
          "to" : {
            "deprecated" : true,
            "oneOf" : [ {
              "$ref" : "#/definitions/_types:DateMath"
            }, {
              "nullable" : true,
              "type" : "string"
            } ]
          }
        }
      } ]
    },
    "_types.analysis:KuromojiTokenizer" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenizerBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "kuromoji_tokenizer" ]
          },
          "discard_punctuation" : {
            "type" : "boolean"
          },
          "mode" : {
            "$ref" : "#/definitions/_types.analysis:KuromojiTokenizationMode"
          },
          "nbest_cost" : {
            "type" : "number"
          },
          "nbest_examples" : {
            "type" : "string"
          },
          "user_dictionary" : {
            "type" : "string"
          },
          "user_dictionary_rules" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "discard_compound_token" : {
            "type" : "boolean"
          }
        },
        "required" : [ "type", "mode" ]
      } ]
    },
    "_types.analysis:PorterStemTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "porter_stem" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:HtmlStripCharFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:CharFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "html_strip" ]
          },
          "escaped_tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "defaultSnippets" : [ {
              "body" : [ "${1:b}" ]
            } ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:KeywordMarkerTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "keyword_marker" ]
          },
          "ignore_case" : {
            "type" : "boolean"
          },
          "keywords" : {
            "oneOf" : [ {
              "type" : "string"
            }, {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            } ]
          },
          "keywords_path" : {
            "type" : "string"
          },
          "keywords_pattern" : {
            "type" : "string"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:LengthTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "length" ]
          },
          "max" : {
            "type" : "number"
          },
          "min" : {
            "type" : "number"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.query_dsl:RangeQueryBasestring" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "relation" : {
            "$ref" : "#/definitions/_types.query_dsl:RangeRelation"
          },
          "gt" : {
            "description" : "Greater than.",
            "type" : "string"
          },
          "gte" : {
            "description" : "Greater than or equal to.",
            "type" : "string"
          },
          "lt" : {
            "description" : "Less than.",
            "type" : "string"
          },
          "lte" : {
            "description" : "Less than or equal to.",
            "type" : "string"
          },
          "from" : {
            "deprecated" : true,
            "oneOf" : [ {
              "type" : "string"
            }, {
              "nullable" : true,
              "type" : "string"
            } ]
          },
          "to" : {
            "deprecated" : true,
            "oneOf" : [ {
              "type" : "string"
            }, {
              "nullable" : true,
              "type" : "string"
            } ]
          }
        }
      } ]
    },
    "_types.analysis:IcuFoldingTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "icu_folding" ]
          },
          "unicode_set_filter" : {
            "type" : "string"
          }
        },
        "required" : [ "type", "unicode_set_filter" ]
      } ]
    },
    "_types.query_dsl:SpanGapQuery" : {
      "description" : "Can only be used as a clause in a span_near query.",
      "type" : "object",
      "additionalProperties" : {
        "type" : "number"
      },
      "minProperties" : 1,
      "maxProperties" : 1
    },
    "_types:TextEmbedding" : {
      "type" : "object",
      "properties" : {
        "model_id" : {
          "type" : "string"
        },
        "model_text" : {
          "type" : "string"
        }
      },
      "required" : [ "model_id", "model_text" ]
    },
    "_types.analysis:NoriDecompoundMode" : {
      "type" : "string",
      "enum" : [ "discard", "none", "mixed" ]
    },
    "_types.analysis:PathHierarchyTokenizer" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenizerBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "path_hierarchy" ]
          },
          "buffer_size" : {
            "$ref" : "#/definitions/_spec_utils:Stringifiedinteger"
          },
          "delimiter" : {
            "type" : "string"
          },
          "replacement" : {
            "type" : "string"
          },
          "reverse" : {
            "$ref" : "#/definitions/_spec_utils:Stringifiedboolean"
          },
          "skip" : {
            "$ref" : "#/definitions/_spec_utils:Stringifiedinteger"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.mapping:SyntheticSourceKeepEnum" : {
      "type" : "string",
      "enum" : [ "none", "arrays", "all" ]
    },
    "_types.analysis:ElisionTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "elision" ]
          },
          "articles" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "articles_path" : {
            "type" : "string"
          },
          "articles_case" : {
            "$ref" : "#/definitions/_spec_utils:Stringifiedboolean"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:IcuNormalizationCharFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:CharFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "icu_normalizer" ]
          },
          "mode" : {
            "$ref" : "#/definitions/_types.analysis:IcuNormalizationMode"
          },
          "name" : {
            "$ref" : "#/definitions/_types.analysis:IcuNormalizationType"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:WhitespaceTokenizer" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenizerBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "whitespace" ]
          },
          "max_token_length" : {
            "type" : "number"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:PatternReplaceTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "pattern_replace" ]
          },
          "all" : {
            "type" : "boolean"
          },
          "flags" : {
            "type" : "string"
          },
          "pattern" : {
            "type" : "string"
          },
          "replacement" : {
            "type" : "string"
          }
        },
        "required" : [ "type", "pattern" ]
      } ]
    },
    "_types.analysis:EdgeNGramTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "edge_ngram" ]
          },
          "max_gram" : {
            "type" : "number"
          },
          "min_gram" : {
            "type" : "number"
          },
          "side" : {
            "$ref" : "#/definitions/_types.analysis:EdgeNGramSide"
          },
          "preserve_original" : {
            "$ref" : "#/definitions/_spec_utils:Stringifiedboolean"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:CharGroupTokenizer" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenizerBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "char_group" ]
          },
          "tokenize_on_chars" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "max_token_length" : {
            "type" : "number"
          }
        },
        "required" : [ "type", "tokenize_on_chars" ]
      } ]
    },
    "_types.analysis:ClassicTokenizer" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenizerBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "classic" ]
          },
          "max_token_length" : {
            "type" : "number"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:LimitTokenCountTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "limit" ]
          },
          "consume_all_tokens" : {
            "type" : "boolean"
          },
          "max_token_count" : {
            "$ref" : "#/definitions/_spec_utils:Stringifiedinteger"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:RemoveDuplicatesTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "remove_duplicates" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:SynonymTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "synonym" ]
          },
          "expand" : {
            "type" : "boolean"
          },
          "format" : {
            "$ref" : "#/definitions/_types.analysis:SynonymFormat"
          },
          "lenient" : {
            "type" : "boolean"
          },
          "synonyms" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "synonyms_path" : {
            "type" : "string"
          },
          "synonyms_set" : {
            "type" : "string"
          },
          "tokenizer" : {
            "type" : "string"
          },
          "updateable" : {
            "type" : "boolean"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:KuromojiReadingFormTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "kuromoji_readingform" ]
          },
          "use_romaji" : {
            "type" : "boolean"
          }
        },
        "required" : [ "type", "use_romaji" ]
      } ]
    },
    "_types.analysis:IcuNormalizationType" : {
      "type" : "string",
      "enum" : [ "nfc", "nfkc", "nfkc_cf" ]
    },
    "_types.analysis:KStemTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "kstem" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:KeywordTokenizer" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenizerBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "keyword" ]
          },
          "buffer_size" : {
            "type" : "number"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:SynonymGraphTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "synonym_graph" ]
          },
          "expand" : {
            "type" : "boolean"
          },
          "format" : {
            "$ref" : "#/definitions/_types.analysis:SynonymFormat"
          },
          "lenient" : {
            "type" : "boolean"
          },
          "synonyms" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "synonyms_path" : {
            "type" : "string"
          },
          "synonyms_set" : {
            "type" : "string"
          },
          "tokenizer" : {
            "type" : "string"
          },
          "updateable" : {
            "type" : "boolean"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:IcuTransformTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "icu_transform" ]
          },
          "dir" : {
            "$ref" : "#/definitions/_types.analysis:IcuTransformDirection"
          },
          "id" : {
            "type" : "string"
          }
        },
        "required" : [ "type", "id" ]
      } ]
    },
    "_types:LatLonGeoLocation" : {
      "type" : "object",
      "properties" : {
        "lat" : {
          "description" : "Latitude",
          "type" : "number"
        },
        "lon" : {
          "description" : "Longitude",
          "type" : "number"
        }
      },
      "required" : [ "lat", "lon" ]
    },
    "_types.analysis:TrimTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "trim" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:CommonGramsTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "common_grams" ]
          },
          "common_words" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "common_words_path" : {
            "type" : "string"
          },
          "ignore_case" : {
            "type" : "boolean"
          },
          "query_mode" : {
            "type" : "boolean"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:ReverseTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "reverse" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:DictionaryDecompounderTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:CompoundWordTokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "dictionary_decompounder" ]
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:NGramTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "ngram" ]
          },
          "max_gram" : {
            "type" : "number"
          },
          "min_gram" : {
            "type" : "number"
          },
          "preserve_original" : {
            "$ref" : "#/definitions/_spec_utils:Stringifiedboolean"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:SnowballLanguage" : {
      "type" : "string",
      "enum" : [ "Armenian", "Basque", "Catalan", "Danish", "Dutch", "English", "Finnish", "French", "German", "German2", "Hungarian", "Italian", "Kp", "Lovins", "Norwegian", "Porter", "Portuguese", "Romanian", "Russian", "Spanish", "Swedish", "Turkish" ]
    },
    "_global.search._types:FieldCollapse" : {
      "type" : "object",
      "properties" : {
        "field" : {
          "$ref" : "#/definitions/_types:Field"
        },
        "inner_hits" : {
          "description" : "The number of inner hits and their sort order",
          "oneOf" : [ {
            "$ref" : "#/definitions/_global.search._types:InnerHits"
          }, {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/_global.search._types:InnerHits"
            }
          } ]
        },
        "max_concurrent_group_searches" : {
          "description" : "The number of concurrent requests allowed to retrieve the inner_hits per group",
          "type" : "number"
        },
        "collapse" : {
          "$ref" : "#/definitions/_global.search._types:FieldCollapse"
        }
      },
      "required" : [ "field" ]
    },
    "_types.analysis:KeepTypesTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "keep_types" ]
          },
          "mode" : {
            "$ref" : "#/definitions/_types.analysis:KeepTypesMode"
          },
          "types" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.query_dsl:DecayFunction" : {
      "oneOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:UntypedDecayFunction"
      }, {
        "$ref" : "#/definitions/_types.query_dsl:DateDecayFunction"
      }, {
        "$ref" : "#/definitions/_types.query_dsl:NumericDecayFunction"
      }, {
        "$ref" : "#/definitions/_types.query_dsl:GeoDecayFunction"
      } ]
    },
    "_types:Sort" : {
      "oneOf" : [ {
        "$ref" : "#/definitions/_types:SortCombinations"
      }, {
        "type" : "array",
        "items" : {
          "$ref" : "#/definitions/_types:SortCombinations"
        }
      } ]
    },
    "_types.query_dsl:RandomScoreFunction" : {
      "type" : "object",
      "properties" : {
        "field" : {
          "$ref" : "#/definitions/_types:Field"
        },
        "seed" : {
          "oneOf" : [ {
            "type" : "number"
          }, {
            "type" : "string"
          } ]
        }
      }
    },
    "_types.analysis:WordDelimiterGraphTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "word_delimiter_graph" ]
          },
          "adjust_offsets" : {
            "type" : "boolean"
          },
          "catenate_all" : {
            "type" : "boolean"
          },
          "catenate_numbers" : {
            "type" : "boolean"
          },
          "catenate_words" : {
            "type" : "boolean"
          },
          "generate_number_parts" : {
            "type" : "boolean"
          },
          "generate_word_parts" : {
            "type" : "boolean"
          },
          "ignore_keywords" : {
            "type" : "boolean"
          },
          "preserve_original" : {
            "$ref" : "#/definitions/_spec_utils:Stringifiedboolean"
          },
          "protected_words" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "protected_words_path" : {
            "type" : "string"
          },
          "split_on_case_change" : {
            "type" : "boolean"
          },
          "split_on_numerics" : {
            "type" : "boolean"
          },
          "stem_english_possessive" : {
            "type" : "boolean"
          },
          "type_table" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "type_table_path" : {
            "type" : "string"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:UaxEmailUrlTokenizer" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenizerBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "uax_url_email" ]
          },
          "max_token_length" : {
            "type" : "number"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.query_dsl:DistanceFeatureQueryBase" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "origin" : {
            "description" : "Date or point of origin used to calculate distances.\nIf the `field` value is a `date` or `date_nanos` field, the `origin` value must be a date.\nDate Math, such as `now-1h`, is supported.\nIf the field value is a `geo_point` field, the `origin` value must be a geopoint.",
            "type" : "object"
          },
          "pivot" : {
            "description" : "Distance from the `origin` at which relevance scores receive half of the `boost` value.\nIf the `field` value is a `date` or `date_nanos` field, the `pivot` value must be a time unit, such as `1h` or `10d`. If the `field` value is a `geo_point` field, the `pivot` value must be a distance unit, such as `1km` or `12m`.",
            "type" : "object"
          },
          "field" : {
            "$ref" : "#/definitions/_types:Field"
          }
        },
        "required" : [ "origin", "pivot", "field" ]
      } ]
    },
    "_types.query_dsl:DistanceFeatureQueryBaseDateMathDuration" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "origin" : {
            "$ref" : "#/definitions/_types:DateMath"
          },
          "pivot" : {
            "$ref" : "#/definitions/_types:Duration"
          },
          "field" : {
            "$ref" : "#/definitions/_types:Field"
          }
        },
        "required" : [ "origin", "pivot", "field" ]
      } ]
    },
    "_types.query_dsl:IntervalsFilter" : {
      "type" : "object",
      "properties" : {
        "after" : {
          "$ref" : "#/definitions/_types.query_dsl:IntervalsContainer"
        },
        "before" : {
          "$ref" : "#/definitions/_types.query_dsl:IntervalsContainer"
        },
        "contained_by" : {
          "$ref" : "#/definitions/_types.query_dsl:IntervalsContainer"
        },
        "containing" : {
          "$ref" : "#/definitions/_types.query_dsl:IntervalsContainer"
        },
        "not_contained_by" : {
          "$ref" : "#/definitions/_types.query_dsl:IntervalsContainer"
        },
        "not_containing" : {
          "$ref" : "#/definitions/_types.query_dsl:IntervalsContainer"
        },
        "not_overlapping" : {
          "$ref" : "#/definitions/_types.query_dsl:IntervalsContainer"
        },
        "overlapping" : {
          "$ref" : "#/definitions/_types.query_dsl:IntervalsContainer"
        },
        "script" : {
          "$ref" : "#/definitions/_types:Script"
        }
      },
      "minProperties" : 1,
      "maxProperties" : 1
    },
    "_types.analysis:MultiplexerTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "multiplexer" ]
          },
          "filters" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "preserve_original" : {
            "$ref" : "#/definitions/_spec_utils:Stringifiedboolean"
          }
        },
        "required" : [ "type", "filters" ]
      } ]
    },
    "_types.analysis:KeepWordsTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "keep" ]
          },
          "keep_words" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "keep_words_case" : {
            "type" : "boolean"
          },
          "keep_words_path" : {
            "type" : "string"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:StopTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "stop" ]
          },
          "ignore_case" : {
            "type" : "boolean"
          },
          "remove_trailing" : {
            "type" : "boolean"
          },
          "stopwords" : {
            "$ref" : "#/definitions/_types.analysis:StopWords"
          },
          "stopwords_path" : {
            "type" : "string"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "indices._types:NumericFielddataFormat" : {
      "type" : "string",
      "enum" : [ "array", "disabled" ]
    },
    "_types.analysis:KuromojiPartOfSpeechTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "kuromoji_part_of_speech" ]
          },
          "stoptags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "required" : [ "type", "stoptags" ]
      } ]
    },
    "_types.analysis:NoriPartOfSpeechTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "nori_part_of_speech" ]
          },
          "stoptags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:HunspellTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "hunspell" ]
          },
          "dedup" : {
            "type" : "boolean"
          },
          "dictionary" : {
            "type" : "string"
          },
          "locale" : {
            "type" : "string"
          },
          "longest_only" : {
            "type" : "boolean"
          }
        },
        "required" : [ "type", "locale" ]
      } ]
    },
    "_types.analysis:LowercaseTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "lowercase" ]
          },
          "language" : {
            "type" : "string"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:EdgeNGramTokenizer" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenizerBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "edge_ngram" ]
          },
          "custom_token_chars" : {
            "type" : "string"
          },
          "max_gram" : {
            "type" : "number"
          },
          "min_gram" : {
            "type" : "number"
          },
          "token_chars" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/_types.analysis:TokenChar"
            }
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:DelimitedPayloadTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "delimited_payload" ]
          },
          "delimiter" : {
            "type" : "string"
          },
          "encoding" : {
            "$ref" : "#/definitions/_types.analysis:DelimitedPayloadEncoding"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.analysis:FingerprintTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "fingerprint" ]
          },
          "max_output_size" : {
            "type" : "number"
          },
          "separator" : {
            "type" : "string"
          }
        },
        "required" : [ "type" ]
      } ]
    },
    "_types.query_dsl:DistanceFeatureQueryBaseGeoLocationDistance" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:QueryBase"
      }, {
        "type" : "object",
        "properties" : {
          "origin" : {
            "$ref" : "#/definitions/_types:GeoLocation"
          },
          "pivot" : {
            "$ref" : "#/definitions/_types:Distance"
          },
          "field" : {
            "$ref" : "#/definitions/_types:Field"
          }
        },
        "required" : [ "origin", "pivot", "field" ]
      } ]
    },
    "_types.analysis:PatternCaptureTokenFilter" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "pattern_capture" ]
          },
          "patterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "preserve_original" : {
            "$ref" : "#/definitions/_spec_utils:Stringifiedboolean"
          }
        },
        "required" : [ "type", "patterns" ]
      } ]
    },
    "_types.query_dsl:RankFeatureFunction" : {
      "type" : "object"
    },
    "_types:SortCombinations" : {
      "oneOf" : [ {
        "$ref" : "#/definitions/_types:Field"
      }, {
        "$ref" : "#/definitions/_types:SortOptions"
      } ]
    },
    "_types:DateMath" : {
      "type" : "string"
    },
    "_types.analysis:CharFilterBase" : {
      "type" : "object",
      "properties" : {
        "version" : {
          "$ref" : "#/definitions/_types:VersionString"
        }
      }
    },
    "_global.search._types:SourceFilter" : {
      "type" : "object",
      "properties" : {
        "excludes" : {
          "$ref" : "#/definitions/_types:Fields"
        },
        "includes" : {
          "$ref" : "#/definitions/_types:Fields"
        }
      }
    },
    "_types.query_dsl:FieldValueFactorModifier" : {
      "type" : "string",
      "enum" : [ "none", "log", "log1p", "log2p", "ln", "ln1p", "ln2p", "square", "sqrt", "reciprocal" ]
    },
    "_types.analysis:PhoneticLanguage" : {
      "type" : "string",
      "enum" : [ "any", "common", "cyrillic", "english", "french", "german", "hebrew", "hungarian", "polish", "romanian", "russian", "spanish" ]
    },
    "_types.analysis:DelimitedPayloadEncoding" : {
      "type" : "string",
      "enum" : [ "int", "float", "identity" ]
    },
    "_types.query_dsl:DateDecayFunction" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:DecayFunctionBaseDateMathDuration"
      }, {
        "type" : "object"
      } ]
    },
    "_types.analysis:KeepTypesMode" : {
      "type" : "string",
      "enum" : [ "include", "exclude" ]
    },
    "_types.analysis:PhoneticNameType" : {
      "type" : "string",
      "enum" : [ "generic", "ashkenazi", "sephardic" ]
    },
    "_types.analysis:EdgeNGramSide" : {
      "type" : "string",
      "enum" : [ "front", "back" ]
    },
    "_types.query_dsl:SimpleQueryStringFlag" : {
      "type" : "string",
      "enum" : [ "NONE", "AND", "NOT", "OR", "PREFIX", "PHRASE", "PRECEDENCE", "ESCAPE", "WHITESPACE", "FUZZY", "NEAR", "SLOP", "ALL" ]
    },
    "_types.analysis:TokenizerBase" : {
      "type" : "object",
      "properties" : {
        "version" : {
          "$ref" : "#/definitions/_types:VersionString"
        }
      }
    },
    "_types.analysis:PhoneticEncoder" : {
      "type" : "string",
      "enum" : [ "metaphone", "double_metaphone", "soundex", "refined_soundex", "caverphone1", "caverphone2", "cologne", "nysiis", "koelnerphonetik", "haasephonetik", "beider_morse", "daitch_mokotoff" ]
    },
    "_types.analysis:TokenFilterBase" : {
      "type" : "object",
      "properties" : {
        "version" : {
          "$ref" : "#/definitions/_types:VersionString"
        }
      }
    },
    "_types.query_dsl:NumericDecayFunction" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:DecayFunctionBasedoubledouble"
      }, {
        "type" : "object"
      } ]
    },
    "_types.analysis:SynonymFormat" : {
      "type" : "string",
      "enum" : [ "solr", "wordnet" ]
    },
    "_types.analysis:PhoneticRuleType" : {
      "type" : "string",
      "enum" : [ "approx", "exact" ]
    },
    "_global.search._types:HighlightBase" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "$ref" : "#/definitions/_global.search._types:HighlighterType"
        },
        "boundary_chars" : {
          "description" : "A string that contains each boundary character.",
          "type" : "string"
        },
        "boundary_max_scan" : {
          "description" : "How far to scan for boundary characters.",
          "type" : "number"
        },
        "boundary_scanner" : {
          "$ref" : "#/definitions/_global.search._types:BoundaryScanner"
        },
        "boundary_scanner_locale" : {
          "description" : "Controls which locale is used to search for sentence and word boundaries.\nThis parameter takes a form of a language tag, for example: `\"en-US\"`, `\"fr-FR\"`, `\"ja-JP\"`.",
          "type" : "string"
        },
        "force_source" : {
          "deprecated" : true,
          "type" : "boolean"
        },
        "fragmenter" : {
          "$ref" : "#/definitions/_global.search._types:HighlighterFragmenter"
        },
        "fragment_size" : {
          "description" : "The size of the highlighted fragment in characters.",
          "type" : "number"
        },
        "highlight_filter" : {
          "type" : "boolean"
        },
        "highlight_query" : {
          "$ref" : "#/definitions/_types.query_dsl:QueryContainer"
        },
        "max_fragment_length" : {
          "type" : "number"
        },
        "max_analyzed_offset" : {
          "description" : "If set to a non-negative value, highlighting stops at this defined maximum limit.\nThe rest of the text is not processed, thus not highlighted and no error is returned\nThe `max_analyzed_offset` query setting does not override the `index.highlight.max_analyzed_offset` setting, which prevails when it’s set to lower value than the query setting.",
          "type" : "number"
        },
        "no_match_size" : {
          "description" : "The amount of text you want to return from the beginning of the field if there are no matching fragments to highlight.",
          "type" : "number"
        },
        "number_of_fragments" : {
          "description" : "The maximum number of fragments to return.\nIf the number of fragments is set to `0`, no fragments are returned.\nInstead, the entire field contents are highlighted and returned.\nThis can be handy when you need to highlight short texts such as a title or address, but fragmentation is not required.\nIf `number_of_fragments` is `0`, `fragment_size` is ignored.",
          "type" : "number"
        },
        "options" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "order" : {
          "$ref" : "#/definitions/_global.search._types:HighlighterOrder"
        },
        "phrase_limit" : {
          "description" : "Controls the number of matching phrases in a document that are considered.\nPrevents the `fvh` highlighter from analyzing too many phrases and consuming too much memory.\nWhen using `matched_fields`, `phrase_limit` phrases per matched field are considered. Raising the limit increases query time and consumes more memory.\nOnly supported by the `fvh` highlighter.",
          "type" : "number"
        },
        "post_tags" : {
          "description" : "Use in conjunction with `pre_tags` to define the HTML tags to use for the highlighted text.\nBy default, highlighted text is wrapped in `<em>` and `</em>` tags.",
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "pre_tags" : {
          "description" : "Use in conjunction with `post_tags` to define the HTML tags to use for the highlighted text.\nBy default, highlighted text is wrapped in `<em>` and `</em>` tags.",
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "require_field_match" : {
          "description" : "By default, only fields that contains a query match are highlighted.\nSet to `false` to highlight all fields.",
          "type" : "boolean"
        },
        "tags_schema" : {
          "$ref" : "#/definitions/_global.search._types:HighlighterTagsSchema"
        }
      }
    },
    "_types.analysis:TokenChar" : {
      "type" : "string",
      "enum" : [ "letter", "digit", "whitespace", "punctuation", "symbol", "custom" ]
    },
    "_global.search._types:HighlightField" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_global.search._types:HighlightBase"
      }, {
        "type" : "object",
        "properties" : {
          "fragment_offset" : {
            "type" : "number"
          },
          "matched_fields" : {
            "$ref" : "#/definitions/_types:Fields"
          }
        }
      } ]
    },
    "_types.analysis:CompoundWordTokenFilterBase" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.analysis:TokenFilterBase"
      }, {
        "type" : "object",
        "properties" : {
          "hyphenation_patterns_path" : {
            "type" : "string"
          },
          "max_subword_size" : {
            "type" : "number"
          },
          "min_subword_size" : {
            "type" : "number"
          },
          "min_word_size" : {
            "type" : "number"
          },
          "only_longest_match" : {
            "type" : "boolean"
          },
          "word_list" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "word_list_path" : {
            "type" : "string"
          }
        }
      } ]
    },
    "_types.query_dsl:UntypedDecayFunction" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:DecayFunctionBase"
      }, {
        "type" : "object"
      } ]
    },
    "_global.search._types:HighlighterEncoder" : {
      "type" : "string",
      "enum" : [ "default", "html" ]
    },
    "_types.query_dsl:GeoDecayFunction" : {
      "allOf" : [ {
        "$ref" : "#/definitions/_types.query_dsl:DecayFunctionBaseGeoLocationDistance"
      }, {
        "type" : "object"
      } ]
    },
    "_types.query_dsl:RangeRelation" : {
      "type" : "string",
      "enum" : [ "within", "contains", "intersects" ]
    },
    "_types.analysis:IcuTransformDirection" : {
      "type" : "string",
      "enum" : [ "forward", "reverse" ]
    },
    "_global.search._types:BoundaryScanner" : {
      "type" : "string",
      "enum" : [ "chars", "sentence", "word" ]
    },
    "_global.search._types:HighlighterFragmenter" : {
      "type" : "string",
      "enum" : [ "simple", "span" ]
    },
    "_types.query_dsl:DecayFunctionBaseGeoLocationDistance" : {
      "type" : "object",
      "properties" : {
        "multi_value_mode" : {
          "$ref" : "#/definitions/_types.query_dsl:MultiValueMode"
        }
      }
    },
    "_types.query_dsl:DecayFunctionBaseDateMathDuration" : {
      "type" : "object",
      "properties" : {
        "multi_value_mode" : {
          "$ref" : "#/definitions/_types.query_dsl:MultiValueMode"
        }
      }
    },
    "_global.search._types:HighlighterTagsSchema" : {
      "type" : "string",
      "enum" : [ "styled" ]
    },
    "_global.search._types:HighlighterType" : {
      "anyOf" : [ {
        "type" : "string",
        "enum" : [ "plain", "fvh", "unified" ]
      }, {
        "type" : "string"
      } ]
    },
    "_types.query_dsl:DecayFunctionBasedoubledouble" : {
      "type" : "object",
      "properties" : {
        "multi_value_mode" : {
          "$ref" : "#/definitions/_types.query_dsl:MultiValueMode"
        }
      }
    },
    "_global.search._types:HighlighterOrder" : {
      "type" : "string",
      "enum" : [ "score" ]
    },
    "_types.query_dsl:DecayFunctionBase" : {
      "type" : "object",
      "properties" : {
        "multi_value_mode" : {
          "$ref" : "#/definitions/_types.query_dsl:MultiValueMode"
        }
      }
    },
    "_types:SortOptions" : {
      "type" : "object",
      "properties" : {
        "_score" : {
          "$ref" : "#/definitions/_types:ScoreSort"
        },
        "_doc" : {
          "$ref" : "#/definitions/_types:ScoreSort"
        },
        "_geo_distance" : {
          "$ref" : "#/definitions/_types:GeoDistanceSort"
        },
        "_script" : {
          "$ref" : "#/definitions/_types:ScriptSort"
        }
      },
      "minProperties" : 1,
      "maxProperties" : 1
    },
    "_types.query_dsl:MultiValueMode" : {
      "type" : "string",
      "enum" : [ "min", "max", "avg", "sum" ]
    },
    "_types:ScoreSort" : {
      "type" : "object",
      "properties" : {
        "order" : {
          "$ref" : "#/definitions/_types:SortOrder"
        }
      }
    },
    "_types:GeoDistanceSort" : {
      "type" : "object",
      "properties" : {
        "mode" : {
          "$ref" : "#/definitions/_types:SortMode"
        },
        "distance_type" : {
          "$ref" : "#/definitions/_types:GeoDistanceType"
        },
        "ignore_unmapped" : {
          "type" : "boolean"
        },
        "order" : {
          "$ref" : "#/definitions/_types:SortOrder"
        },
        "unit" : {
          "$ref" : "#/definitions/_types:DistanceUnit"
        },
        "nested" : {
          "$ref" : "#/definitions/_types:NestedSortValue"
        }
      }
    },
    "_types:ScriptSort" : {
      "type" : "object",
      "properties" : {
        "order" : {
          "$ref" : "#/definitions/_types:SortOrder"
        },
        "script" : {
          "$ref" : "#/definitions/_types:Script"
        },
        "type" : {
          "$ref" : "#/definitions/_types:ScriptSortType"
        },
        "mode" : {
          "$ref" : "#/definitions/_types:SortMode"
        },
        "nested" : {
          "$ref" : "#/definitions/_types:NestedSortValue"
        }
      },
      "required" : [ "script" ]
    },
    "_types:DistanceUnit" : {
      "type" : "string",
      "enum" : [ "in", "ft", "yd", "mi", "nmi", "km", "m", "cm", "mm" ]
    },
    "_types:SortOrder" : {
      "type" : "string",
      "enum" : [ "asc", "desc" ]
    },
    "_types:ScriptSortType" : {
      "type" : "string",
      "enum" : [ "string", "number", "version" ]
    },
    "_types:NestedSortValue" : {
      "type" : "object",
      "properties" : {
        "filter" : {
          "$ref" : "#/definitions/_types.query_dsl:QueryContainer"
        },
        "max_children" : {
          "type" : "number"
        },
        "nested" : {
          "$ref" : "#/definitions/_types:NestedSortValue"
        },
        "path" : {
          "$ref" : "#/definitions/_types:Field"
        }
      },
      "required" : [ "path" ]
    },
    "_types:SortMode" : {
      "type" : "string",
      "enum" : [ "min", "max", "sum", "avg", "median" ]
    },
    "legacy_index_template" : {
      "type" : "object",
      "properties" : {
        "aliases" : {
          "description" : "Specific to legacy index templates.\nIndex aliases to add.",
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/indices._types:Alias"
          }
        },
        "mappings" : {
          "description" : "Specific to legacy index templates.",
          "$ref" : "#/definitions/_types.mapping:TypeMapping"
        },
        "settings" : {
          "description" : "Specific to legacy index templates.",
          "$ref" : "#/definitions/indices._types:IndexSettings"
        },
        "order" : {
          "description" : "Specific to legacy index templates.",
          "type" : "integer",
          "default" : 0
        }
      }
    },
    "component_template" : {
      "type" : "object",
      "required" : [ "template" ],
      "properties" : {
        "template" : {
          "$ref" : "#/definitions/indices.put_index_template:IndexTemplateMapping"
        },
        "version" : {
          "$ref" : "#/definitions/_types:VersionNumber"
        },
        "_meta" : {
          "$ref" : "#/definitions/_types:Metadata"
        },
        "allow_auto_create" : {
          "description" : "This setting overrides the value of the `action.auto_create_index` cluster setting.\nIf set to `true` in a template, then indices can be automatically created using that template even if auto-creation of indices is disabled via `actions.auto_create_index`.\nIf set to `false`, then indices or data streams matching the template must always be explicitly created, and may never be automatically created.",
          "type" : "boolean"
        },
        "deprecated" : {
          "description" : "Marks this component template as deprecated. \nWhen a deprecated component template is referenced by a non-deprecated index template, Elasticsearch will emit a deprecation warning.",
          "type" : "boolean"
        }
      }
    },
    "analyzer_examples" : {
      "examples" : [ "custom", "fingerprint", "keyword", "nori", "pattern", "simple", "standard", "stop", "whitespace", "icu_analyzer", "kuromoji", "snowball", "arabic", "armenian", "basque", "bengali", "brazilian", "bulgarian", "catalan", "chinese", "cjk", "czech", "danish", "dutch", "english", "estonian", "finnish", "french", "galician", "german", "greek", "hindi", "hungarian", "indonesian", "irish", "italian", "latvian", "lithuanian", "norwegian", "persian", "portuguese", "romanian", "russian", "serbian", "sorani", "spanish", "swedish", "turkish", "thai" ]
    },
    "tokenizer_examples" : {
      "examples" : [ "standard", "char_group", "classic", "edge_ngram", "keyword", "letter", "lowercase", "ngram", "path_hierarchy", "pattern", "simple_pattern", "simple_pattern_split", "thai", "uax_url_email", "whitespace" ]
    },
    "filter_examples" : {
      "examples" : [ "arabic_normalization", "asciifolding", "bengali_normalization", "cjk_width", "decimal_digit", "elision", "german_normalization", "hindi_normalization", "indic_normalization", "lowercase", "persian_normalization", "scandinavian_folding", "serbian_normalization", "sorani_normalization", "uppercase" ]
    }
  },
  "allOf" : [ {
    "$ref" : "#/definitions/composable_index_template"
  }, {
    "$ref" : "#/definitions/legacy_index_template"
  } ]
}